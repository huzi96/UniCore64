From d992dba391e308e8b90b1b0fbeff31444b1ef49d Mon Sep 17 00:00:00 2001
From: WangJing <wangjing@mprc.pku.edu.cn>
Date: Tue, 25 Oct 2011 18:00:09 +0800
Subject: [PATCH 029/641] UniCore64: Add pte related function

Fixed error:
mm/built-in.o: In function `sys_remap_file_pages':
(.text+0x1708b): undefined reference to `set_pte'
mm/built-in.o: In function `__pte_alloc':
(.text+0x17c71): undefined reference to `pte_alloc_one'
mm/built-in.o: In function `__pte_alloc_kernel':
(.text+0x17cd2): undefined reference to `pte_alloc_one_kernel'
mm/built-in.o: In function `__pte_alloc_kernel':
(.text+0x17d08): undefined reference to `pte_free_kernel'
mm/built-in.o: In function `__pte_alloc':
(.text+0x17caa): undefined reference to `pte_free'

Signed-off-by: WangJing <wangjing@mprc.pku.edu.cn>
---
 arch/unicore64/mm/pgtable.c |   71 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 71 insertions(+)

diff --git a/arch/unicore64/mm/pgtable.c b/arch/unicore64/mm/pgtable.c
index 623ff8b..161b4a2 100644
--- a/arch/unicore64/mm/pgtable.c
+++ b/arch/unicore64/mm/pgtable.c
@@ -20,3 +20,74 @@ void pgd_free(struct mm_struct *mm, pgd_t *pgd)
 	/* FIXME */
 	BUG();
 }
+
+/**
+ * pte_free() - Free page immediately
+ * @mm:
+ * @p:
+ *
+ * This function is used in __pte_alloc if we raced with another
+ * process).  We have to correct whatever pte_alloc_one() did before
+ * returning the pages to the allocator.
+ */
+void pte_free(struct mm_struct *mm, struct page *p)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * pte_free_kernel() - Free page immediately
+ * @mm:
+ * @p:
+ */
+void pte_free_kernel(struct mm_struct *mm, pte_t *p)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * pte_alloc_one() - Return the address of page table entry
+ * @mm:
+ * address:
+ *
+ * Receives as parameters the address of a Page Middle Directory entry p and
+ * a linear address a, and it returns the address of the Page Table entry
+ * corresponding to a. If the Page Middle Directory entry is null,
+ * the function must allocate a new Page Table
+ */
+pgtable_t pte_alloc_one(struct mm_struct *mm, unsigned long address)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * pte_alloc_one_kernel() - Return the address of a page table entry
+ * @mm:
+ * @address:
+ *
+ * This function is the simaller to pte_alloc_one,and used by kernel only
+ */
+pte_t *pte_alloc_one_kernel(struct mm_struct *mm, unsigned long address)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * set_pte() - sets the given PTE
+ * @ptep:
+ * @pte:
+ *
+ * This function also sanity-checks the requested PTE against the page
+ * homecaching.  Unspecified parts of the PTE are filled in when it is
+ * written to memory, i.e. all caching attributes if "!forcecache",
+ * or the home cpu if "anyhome".
+ */
+void set_pte(pte_t *ptep, pte_t pte)
+{
+	/* FIXME */
+	BUG();
+}
-- 
1.7.9.5

