From 90c09e414f7ce11174568d520493f1c04d525cb9 Mon Sep 17 00:00:00 2001
From: WangJing <wangjing@mprc.pku.edu.cn>
Date: Wed, 26 Oct 2011 17:04:17 +0800
Subject: [PATCH 034/641] UniCore64: Add ioremap file and io functions

Fixed errors:
lib/built-in.o: In function `devm_ioremap_release':
(.text+0x4508): undefined reference to `iounmap'
lib/built-in.o: In function `devm_ioremap':
(.text+0x455b): undefined reference to `ioremap'
lib/built-in.o: In function `devm_ioremap_nocache':
(.text+0x45eb): undefined reference to `ioremap_nocache'
lib/built-in.o: In function `devm_iounmap':
(.text+0x4656): undefined reference to `iounmap'

Signed-off-by: WangJing <wangjing@mprc.pku.edu.cn>
---
 arch/unicore64/mm/Makefile  |    2 +-
 arch/unicore64/mm/ioremap.c |   61 +++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 62 insertions(+), 1 deletion(-)
 create mode 100644 arch/unicore64/mm/ioremap.c

diff --git a/arch/unicore64/mm/Makefile b/arch/unicore64/mm/Makefile
index 0a041ea..cb53aed 100644
--- a/arch/unicore64/mm/Makefile
+++ b/arch/unicore64/mm/Makefile
@@ -1 +1 @@
-obj-y				:= mmu.o pgtable.o
+obj-y				:= mmu.o pgtable.o ioremap.o
diff --git a/arch/unicore64/mm/ioremap.c b/arch/unicore64/mm/ioremap.c
new file mode 100644
index 0000000..d508e5b
--- /dev/null
+++ b/arch/unicore64/mm/ioremap.c
@@ -0,0 +1,61 @@
+#include <linux/kernel.h>
+#include <asm/io.h>
+
+/**
+ * ioremap_nocache     -   map bus memory into CPU space
+ * @offset:    bus address of the memory
+ * @size:      size of the resource to map
+ *
+ * ioremap_nocache performs a platform specific sequence of operations to
+ * make bus memory CPU accessible via the readb/readw/readl/writeb/
+ * writew/writel functions and the other mmio helpers. The returned
+ * address is not guaranteed to be usable directly as a virtual
+ * address.
+ *
+ * This version of ioremap ensures that the memory is marked uncachable
+ * on the CPU as well as honouring existing caching rules from things like
+ * the PCI bus. Note that there are other caches and buffers on many
+ * busses. In particular driver authors should read up on PCI writes
+ *
+ * It's useful if some control registers are in such an area and
+ * write combining or read caching is not desirable:
+ *
+ * Must be freed with iounmap.
+ */
+void __iomem *ioremap_nocache(resource_size_t phys_addr, unsigned long size)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * iounmap - Free a IO remapping
+ * @addr: virtual address from ioremap_*
+ *
+ * Caller must ensure there is only one unmapping for the same pointer.
+ */
+void iounmap(volatile void __iomem *addr)
+{
+	/* FIXME */
+	BUG();
+}
+
+/**
+ * ioremap     -   map bus memory into CPU space
+ * @offset:    bus address of the memory
+ * @size:      size of the resource to map
+ *
+ * ioremap performs a platform specific sequence of operations to
+ * make bus memory CPU accessible via the readb/readw/readl/writeb/
+ * writew/writel functions and the other mmio helpers. The returned
+ * address is not guaranteed to be usable directly as a virtual
+ * address.
+ *
+ * If the area you are trying to map is a PCI BAR you should have a
+ * look at pci_iomap().
+ */
+void __iomem *ioremap(resource_size_t offset, unsigned long size)
+{
+	/* FIXME */
+	BUG();
+}
-- 
1.7.9.5

