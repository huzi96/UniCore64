From fde438c0d50be0d7c6abab8b0c60267403f99c4a Mon Sep 17 00:00:00 2001
From: GuanXuetao <gxt@mprc.pku.edu.cn>
Date: Sat, 10 Dec 2011 14:10:46 +0800
Subject: [PATCH 144/641] UniCore64: split pgtable-prot.h from asm/pgtable.h

Signed-off-by: GuanXuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/include/asm/pgtable-prot.h |   30 +++++++++++++++++++++++++++
 arch/unicore64/include/asm/pgtable.h      |   32 +++++------------------------
 2 files changed, 35 insertions(+), 27 deletions(-)
 create mode 100644 arch/unicore64/include/asm/pgtable-prot.h

diff --git a/arch/unicore64/include/asm/pgtable-prot.h b/arch/unicore64/include/asm/pgtable-prot.h
new file mode 100644
index 0000000..5dcf387
--- /dev/null
+++ b/arch/unicore64/include/asm/pgtable-prot.h
@@ -0,0 +1,30 @@
+#ifndef __UNICORE64_ASM_PGTABLE_H__
+#error "This file is included ONLY in asm/pgtable.h"
+#endif
+
+#include <asm/page.h>
+#include <arch/hwdef-pgtable.h>
+
+#define PAGE_KERNEL	__pgprot(PTE_RWX | PTE_DIRTY | PTE_EXIST | PTE_YOUNG \
+					| PTE_TYPE_CACHE)
+
+/* FIXME: if READ is needed when WRITE or EXEC, otherwise, modify VM_flags */
+#define arch_vm_get_page_prot(vm_flags)	__pgprot(PTE_EXIST | PTE_TYPE_CACHE)
+
+#define __P000		__pgprot(0)
+#define __P001		__pgprot(PTE_READ)
+#define __P010		__pgprot(0)
+#define __P011		__pgprot(PTE_READ)
+#define __P100		__pgprot(PTE_EXEC)
+#define __P101		__pgprot(PTE_EXEC | PTE_READ)
+#define __P110		__pgprot(PTE_EXEC)
+#define __P111		__pgprot(PTE_EXEC | PTE_READ)
+
+#define __S000		__pgprot(0)
+#define __S001		__pgprot(PTE_READ)
+#define __S010		__pgprot(PTE_WRITE)
+#define __S011		__pgprot(PTE_WRITE | PTE_READ)
+#define __S100		__pgprot(PTE_EXEC)
+#define __S101		__pgprot(PTE_EXEC | PTE_READ)
+#define __S110		__pgprot(PTE_EXEC | PTE_WRITE)
+#define __S111		__pgprot(PTE_RWX)
diff --git a/arch/unicore64/include/asm/pgtable.h b/arch/unicore64/include/asm/pgtable.h
index b42a46e..2c19852 100644
--- a/arch/unicore64/include/asm/pgtable.h
+++ b/arch/unicore64/include/asm/pgtable.h
@@ -1,8 +1,12 @@
 #ifndef __UNICORE64_ASM_PGTABLE_H__
 #define __UNICORE64_ASM_PGTABLE_H__
 
-#include <asm-generic/pgtable-nopud.h>
+#include <asm/pgtable-prot.h>
+
 #include <arch/hwdef-pgtable.h>
+#include <arch/hwdef-memory.h>
+
+#include <asm-generic/pgtable-nopud.h>
 
 #define PTE_FILE		PTE_YOUNG	/* only when !PRESENT */
 
@@ -41,32 +45,6 @@ static inline pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
 }
 #define pte_offset_map(dir, addr)	pte_offset_kernel((dir), (addr))
 #define pte_unmap(pte)			do { } while (0)
-
-#define PAGE_KERNEL		__pgprot(PTE_READ | PTE_WRITE   \
-					| PTE_EXEC | PTE_DIRTY  \
-					| PTE_EXIST | PTE_YOUNG \
-					| PTE_TYPE_CACHE)
-
-/* FIXME: if READ is needed when WRITE or EXEC, otherwise, modify VM_flags */
-#define arch_vm_get_page_prot(vm_flags)	__pgprot(PTE_EXIST | PTE_TYPE_CACHE)
-#define __P000		__pgprot(0)
-#define __P001		__pgprot(PTE_READ)
-#define __P010		__pgprot(0)
-#define __P011		__pgprot(PTE_READ)
-#define __P100		__pgprot(PTE_EXEC)
-#define __P101		__pgprot(PTE_EXEC | PTE_READ)
-#define __P110		__pgprot(PTE_EXEC)
-#define __P111		__pgprot(PTE_EXEC | PTE_READ)
-
-#define __S000		__pgprot(0)
-#define __S001		__pgprot(PTE_READ)
-#define __S010		__pgprot(PTE_WRITE)
-#define __S011		__pgprot(PTE_WRITE | PTE_READ)
-#define __S100		__pgprot(PTE_EXEC)
-#define __S101		__pgprot(PTE_EXEC | PTE_READ)
-#define __S110		__pgprot(PTE_EXEC | PTE_WRITE)
-#define __S111		__pgprot(PTE_EXEC | PTE_WRITE | PTE_READ)
-
 #define pte_modify(pte, newprot)	__pte({BUG(); 0; })
 
 /* ZERO_PAGE is a global shared page that is always zero,
-- 
1.7.9.5

