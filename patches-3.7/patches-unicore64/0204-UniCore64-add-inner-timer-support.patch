From 183b29ea3235353b1562691fa5dab91e58b518c2 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Fri, 13 Jan 2012 18:20:17 +0800
Subject: [PATCH 204/641] UniCore64: add inner timer support

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/Kconfig                  |    5 ++
 arch/unicore64/include/arch/hwdef-irq.h |    6 ++
 arch/unicore64/kernel/time.c            |  106 ++++++++++++++++++++++++++++++-
 3 files changed, 115 insertions(+), 2 deletions(-)
 create mode 100644 arch/unicore64/include/arch/hwdef-irq.h

diff --git a/arch/unicore64/Kconfig b/arch/unicore64/Kconfig
index 69c42aa..b5c243e 100644
--- a/arch/unicore64/Kconfig
+++ b/arch/unicore64/Kconfig
@@ -27,6 +27,9 @@ config ARCH_DMA_ADDR_T_64BIT
 config RWSEM_GENERIC_SPINLOCK
 	def_bool y
 
+config GENERIC_CLOCKEVENTS
+	def_bool y
+
 config GENERIC_HWEIGHT
 	def_bool y
 
@@ -56,6 +59,8 @@ endmenu
 
 menu "Kernel Features"
 
+source "kernel/time/Kconfig"
+
 source "mm/Kconfig"
 
 endmenu
diff --git a/arch/unicore64/include/arch/hwdef-irq.h b/arch/unicore64/include/arch/hwdef-irq.h
new file mode 100644
index 0000000..71ce51f
--- /dev/null
+++ b/arch/unicore64/include/arch/hwdef-irq.h
@@ -0,0 +1,6 @@
+#ifndef __UNICORE64_ARCH_HWDEF_IRQ_H__
+#define __UNICORE64_ARCH_HWDEF_IRQ_H__
+
+#define IRQ_TIMER0		(0x1a)
+
+#endif /* __UNICORE64_ARCH_HWDEF_IRQ_H__ */
diff --git a/arch/unicore64/kernel/time.c b/arch/unicore64/kernel/time.c
index d123e31..4eb8ec2 100644
--- a/arch/unicore64/kernel/time.c
+++ b/arch/unicore64/kernel/time.c
@@ -1,11 +1,113 @@
 #include <linux/kernel.h>
 #include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/clockchips.h>
+
+#include <arch/hwdef-copro.h>
+#include <arch/hwdef-irq.h>
+
+#define INNER_TIMER_MATCHREG		p1.c0
+#define INNER_TIMER_COUNTER		p1.c1
+#define INNER_TIMER_STATUS		p1.c2
+#define INNER_TIMER_IRQENABLE		p1.c3
+
+#define uc64_inner_timer_irq_enable()					\
+		write_cp(read_cp(INNER_TIMER_IRQENABLE) | 1,		\
+				INNER_TIMER_IRQENABLE)
+
+#define uc64_inner_timer_irq_disable()					\
+		write_cp(read_cp(INNER_TIMER_IRQENABLE) & ~1,		\
+				INNER_TIMER_IRQENABLE)
+
+#define uc64_inner_timer_status_clear()					\
+		write_cp(read_cp(INNER_TIMER_STATUS) & ~1,		\
+				INNER_TIMER_STATUS)
+
+#define MIN_COUNTER_DELTA			(2)
+
+static cycle_t uc64_inner_timer_read(struct clocksource *cs)
+{
+	return	read_cp(INNER_TIMER_COUNTER);
+}
+
+static int uc64_inner_timer_set_next_event(unsigned long delta,
+		struct clock_event_device *c)
+{
+	unsigned long next, count;
+
+	uc64_inner_timer_irq_enable();
+
+	next = read_cp(INNER_TIMER_COUNTER) + delta;
+	write_cp(next, INNER_TIMER_MATCHREG);
+	count = read_cp(INNER_TIMER_COUNTER);
+
+	return (signed)(next - count) <= MIN_COUNTER_DELTA ? -ETIME : 0;
+}
+
+static void uc64_inner_timer_set_mode(enum clock_event_mode mode,
+		struct clock_event_device *c)
+{
+	switch (mode) {
+	case CLOCK_EVT_MODE_ONESHOT:
+		uc64_inner_timer_irq_disable();
+		uc64_inner_timer_status_clear();
+		break;
+
+	case CLOCK_EVT_MODE_UNUSED:
+	case CLOCK_EVT_MODE_SHUTDOWN:
+	case CLOCK_EVT_MODE_RESUME:
+	case CLOCK_EVT_MODE_PERIODIC:
+		break;
+	}
+}
+
+static irqreturn_t uc64_inner_timer_irqhandler(int irq, void *dev_id)
+{
+	struct clock_event_device *c = dev_id;
+
+	/* Disarm the compare/match, signal the event. */
+	uc64_inner_timer_irq_disable();
+	uc64_inner_timer_status_clear();
+	c->event_handler(c);
+
+	return IRQ_HANDLED;
+}
+
+static struct clock_event_device uc64_inner_timer_ce = {
+	.name		= "uc64-inner-timer-clock-event-device",
+	.features	= CLOCK_EVT_FEAT_ONESHOT,
+	.set_next_event	= uc64_inner_timer_set_next_event,
+	.set_mode	= uc64_inner_timer_set_mode,
+};
+
+static struct irqaction uc64_inner_timer_irq = {
+	.name		= "uc64-inner-timer-irq",
+	.flags		= IRQF_TIMER | IRQF_IRQPOLL,
+	.handler	= uc64_inner_timer_irqhandler,
+	.dev_id		= &uc64_inner_timer_ce,
+};
+
+static struct clocksource uc64_inner_timer_cs = {
+	.name		= "uc64-inner-timer-clocksource",
+	.read		= uc64_inner_timer_read,
+	.mask		= CLOCKSOURCE_MASK(64),
+	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+};
 
 /**
  * time_init() -
  */
 void __init time_init(void)
 {
-	/* FIXME */
-	BUG();
+	/* hardware initialization */
+	uc64_inner_timer_irq_disable();
+	uc64_inner_timer_status_clear();
+
+	clockevents_calc_mult_shift(&uc64_inner_timer_ce, CLOCK_TICK_RATE, 5);
+
+	setup_irq(IRQ_TIMER0, &uc64_inner_timer_irq);
+
+	clocksource_register_hz(&uc64_inner_timer_cs, CLOCK_TICK_RATE);
 }
-- 
1.7.9.5

