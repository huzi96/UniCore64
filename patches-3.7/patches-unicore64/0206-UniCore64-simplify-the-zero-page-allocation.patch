From 66c908e2ef2ba121ff119c2261015c1124f7db87 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Sat, 14 Jan 2012 11:13:10 +0800
Subject: [PATCH 206/641] UniCore64: simplify the zero page allocation

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/include/arch/hwdef-memory.h |    6 ++++++
 arch/unicore64/mm/mmu.c                    |   16 +++-------------
 2 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/arch/unicore64/include/arch/hwdef-memory.h b/arch/unicore64/include/arch/hwdef-memory.h
index 19a9350..75801ca 100644
--- a/arch/unicore64/include/arch/hwdef-memory.h
+++ b/arch/unicore64/include/arch/hwdef-memory.h
@@ -85,6 +85,12 @@
 #define UC64_VM_DTB_START		UC64_PM2VM(UC64_PM_DTB_START)
 
 /*
+ * This page is reserved for zero page.
+ */
+#define UC64_PM_ZEROPAGE		HEX64(00000000, 00404000)
+#define UC64_VM_ZEROPAGE		UC64_PM2VM(UC64_PM_ZEROPAGE)
+
+/*
  * Physical and virtual address of the initial page table.
  * We place the page tables 4K below UC64_VM_KIMAGE_START.
  */
diff --git a/arch/unicore64/mm/mmu.c b/arch/unicore64/mm/mmu.c
index 675603e..b2ae117 100644
--- a/arch/unicore64/mm/mmu.c
+++ b/arch/unicore64/mm/mmu.c
@@ -9,25 +9,15 @@
  */
 struct page *empty_zero_page;
 
-static void __init *early_alloc(unsigned long sz)
-{
-	void *ptr = __va(memblock_alloc(sz, sz));
-	memset(ptr, 0, sz);
-	return ptr;
-}
-
 /*
  * paging_init() sets up the page tables, initialises the zone memory
  * maps, and sets up the zero page, bad page and bad page tables.
  */
 void __init paging_init(void)
 {
-	void *zero_page;
-
-	/* allocate the zero page. */
-	zero_page = early_alloc(PAGE_SIZE);
-
-	empty_zero_page = virt_to_page(zero_page);
+	/* Initialize the zero page. */
+	memset((void *)UC64_VM_ZEROPAGE, 0, PAGE_SIZE);
+	empty_zero_page = virt_to_page(UC64_VM_ZEROPAGE);
 
 	/* FIXME*/
 	BUG();
-- 
1.7.9.5

