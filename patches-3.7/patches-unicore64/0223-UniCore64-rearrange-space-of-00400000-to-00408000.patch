From 5b23c40d97376e4c6895fd886167a5ef42fef942 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Mon, 16 Jan 2012 15:27:22 +0800
Subject: [PATCH 223/641] UniCore64: rearrange space of 00400000 to 00408000

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/include/arch/hwdef-memory.h |   29 +++++++++++++++-------------
 arch/unicore64/kernel/head.S               |    6 +++---
 2 files changed, 19 insertions(+), 16 deletions(-)

diff --git a/arch/unicore64/include/arch/hwdef-memory.h b/arch/unicore64/include/arch/hwdef-memory.h
index 7511979..0c68fd5 100644
--- a/arch/unicore64/include/arch/hwdef-memory.h
+++ b/arch/unicore64/include/arch/hwdef-memory.h
@@ -85,26 +85,29 @@
  * We must make sure that UC64_VM_KIMAGE_START is correctly set.
  * Currently, we expect the least significant 24 bits to be 0x408000.
  *
+ * DTB_START:
+ * The byte offset of the unicore64.dtb in RAM from the start of RAM.
+ * We must make sure that UC64_VM_DTB_START is correctly set.
+ * Currently, we expect the least significant 24 bits to be 0x401000.
+ *
+ * ZEROPAGE:
+ * This page is reserved for zero page.
+ *
  * PGTABLE_PGD:
  * Physical and virtual address of the initial page table.
  * We place the page tables 4K below UC64_VM_KIMAGE_START.
  *
- * PGTABLE_DMAP_PMD:
+ * PGTABLE_PMD_*:
  * Physical address of the direct map pmd.
- *
- * ZEROPAGE:
- * This page is reserved for zero page.
- *
- * DTB_START:
- * The byte offset of the unicore64.dtb in RAM from the start of RAM.
- * We must make sure that UC64_VM_DTB_START is correctly set.
- * Currently, we expect the least significant 24 bits to be 0x401000.
  */
 #define UC64_PM_KIMAGE_START		__BC(00000000, 00408000)
-#define UC64_PM_PGTABLE_PGD		__BC(00000000, 00407000)
-#define UC64_PM_PGTABLE_DMAP_PMD	__BC(00000000, 00406000)
-#define UC64_PM_ZEROPAGE		__BC(00000000, 00404000)
-#define UC64_PM_DTB_START		__BC(00000000, 00401000)
+#define UC64_PM_DTB_START		__BC(00000000, 00400000)
+#define UC64_PM_ZEROPAGE		__BC(00000000, 00402000)
+#define UC64_PM_PGTABLE_PGD		__BC(00000000, 00403000)
+#define UC64_PM_PGTABLE_PUD_DM00	__BC(00000000, 00404000)
+#define UC64_PM_PGTABLE_PUD_DM01	__BC(00000000, 00405000)
+#define UC64_PM_PGTABLE_PUD_IO00	__BC(00000000, 00406000)
+#define UC64_PM_PGTABLE_PUD_IO01	__BC(00000000, 00407000)
 
 #define UC64_PM2VM(paddr)		(UC64_VM_KERNEL_START + (paddr))
 
diff --git a/arch/unicore64/kernel/head.S b/arch/unicore64/kernel/head.S
index 7050430..092588c 100644
--- a/arch/unicore64/kernel/head.S
+++ b/arch/unicore64/kernel/head.S
@@ -85,7 +85,7 @@ ENTRY(__head_pgtable_init)
 	dand	r1, r1, r2
 	dmovl	r2, #UC64_PM_PGTABLE_PGD
 	dadd	r1, r1, r2
-	dmovl	r0, #UC64_PM_PGTABLE_DMAP_PMD
+	dmovl	r0, #UC64_PM_PGTABLE_PUD_DM00
 	dor	r0, r0, #UC64_PGD_EXIST
 	std	r0, [r1]
 
@@ -93,7 +93,7 @@ ENTRY(__head_pgtable_init)
 	 * Step three: clear 4k level-two page table from first
 	 * direct-mapped pmd
 	 */
-	dmovl	r0, #UC64_PM_PGTABLE_DMAP_PMD
+	dmovl	r0, #UC64_PM_PGTABLE_PUD_DM00
 	dmov	r1, #0
 	dmovl	r2, #UC64_PAGE_SIZE
 	call	memset
@@ -103,7 +103,7 @@ ENTRY(__head_pgtable_init)
 	 * Level two page table entry value = physcial frame number + offset
 	 * offset: S=0, MA=10, G=0, RWX=111, M=0, A=0, E=1, US=0, PT=1
 	 */
-	dmovl	r1, #UC64_PM_PGTABLE_DMAP_PMD
+	dmovl	r1, #UC64_PM_PGTABLE_PUD_DM00
 	dmovl	r0, UC64_PM_START
 	dor	r0, r0, #UC64_PMD_SPAGE | UC64_PMD_EXIST
 	dor	r0, r0, #UC64_PMD_TYPE_CACHE | UC64_PMD_RWX
-- 
1.7.9.5

