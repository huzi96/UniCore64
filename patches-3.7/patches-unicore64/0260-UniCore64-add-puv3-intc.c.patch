From f4e06dc7b1e340ba3c50b12a1aa2db439a2226c1 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 19 Jan 2012 13:45:39 +0800
Subject: [PATCH 260/641] UniCore64: add puv3-intc.c

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/include/arch/puv3-irq.h |    3 ++
 arch/unicore64/kernel/Makefile         |    2 +-
 arch/unicore64/kernel/puv3-intc.c      |   83 ++++++++++++++++++++++++++++++++
 3 files changed, 87 insertions(+), 1 deletion(-)
 create mode 100644 arch/unicore64/kernel/puv3-intc.c

diff --git a/arch/unicore64/include/arch/puv3-irq.h b/arch/unicore64/include/arch/puv3-irq.h
index d83431c..2623592 100644
--- a/arch/unicore64/include/arch/puv3-irq.h
+++ b/arch/unicore64/include/arch/puv3-irq.h
@@ -1,6 +1,9 @@
 #ifndef __UNICORE64_ARCH_PUV3_IRQ_H__
 #define __UNICORE64_ARCH_PUV3_IRQ_H__
 
+#define PUV3_IRQS_MIN		(0)
+#define PUV3_IRQS_MAX		(31)
+
 #define IRQ_TIMER0		(0x1a)
 
 #endif /* __UNICORE64_ARCH_PUV3_IRQ_H__ */
diff --git a/arch/unicore64/kernel/Makefile b/arch/unicore64/kernel/Makefile
index 98d9251..3571281 100644
--- a/arch/unicore64/kernel/Makefile
+++ b/arch/unicore64/kernel/Makefile
@@ -10,6 +10,6 @@ obj-y			+= time.o traps.o
 obj-$(CONFIG_UNICORE64)		+= cpu-uc64.o
 obj-$(CONFIG_OF_EARLY_FLATTREE)	+= devtree.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
-obj-$(CONFIG_ARCH_PUV3)		+= puv3-core.o
+obj-$(CONFIG_ARCH_PUV3)		+= puv3-core.o puv3-intc.o
 
 extra-y			:= vmlinux.lds
diff --git a/arch/unicore64/kernel/puv3-intc.c b/arch/unicore64/kernel/puv3-intc.c
new file mode 100644
index 0000000..d9c8210
--- /dev/null
+++ b/arch/unicore64/kernel/puv3-intc.c
@@ -0,0 +1,83 @@
+#include <linux/errno.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/ioport.h>
+#include <linux/irq.h>
+#include <linux/platform_device.h>
+
+#include <arch/puv3-irq.h>
+#include <arch/puv3-intc.h>
+
+#define __puv3_intc_disable_all()	do {			\
+			writel(0, INTC_ICMR);			\
+			writel(0, INTC_ICLR);			\
+			writel(1, INTC_ICCR);			\
+		} while (0)
+
+static void puv3_intc_mask_irq(struct irq_data *d)
+{
+	writel(readl(INTC_ICMR) & ~(1 << d->irq), INTC_ICMR);
+}
+
+static void puv3_intc_unmask_irq(struct irq_data *d)
+{
+	writel(readl(INTC_ICMR) | (1 << d->irq), INTC_ICMR);
+}
+
+/* We don't need to ACK IRQs on the PKUnity unless they're GPIOs */
+static struct irq_chip puv3_intc_normal_chip = {
+	.name		= "PUV3-INTC-NORMAL",
+	.irq_ack	= puv3_intc_mask_irq,
+	.irq_mask	= puv3_intc_mask_irq,
+	.irq_unmask	= puv3_intc_unmask_irq,
+};
+
+static int __devinit puv3_intc_probe(struct platform_device *pdev)
+{
+	unsigned int irq;
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res == NULL) {
+		dev_err(&pdev->dev, "no memory resource defined\n");
+		return -ENODEV;
+	}
+
+	res = request_mem_region(res->start, resource_size(res), pdev->name);
+	if (res == NULL) {
+		dev_err(&pdev->dev, "failed to request memory resource\n");
+		return -EBUSY;
+	}
+
+	/* disable all IRQs */
+	__puv3_intc_disable_all();
+
+	for (irq = PUV3_IRQS_MIN; irq <= PUV3_IRQS_MAX; irq++) {
+		irq_set_chip(irq, &puv3_intc_normal_chip);
+		irq_set_handler(irq, handle_level_irq);
+		irq_modify_status(irq, IRQ_NOREQUEST | IRQ_NOAUTOEN,
+				IRQ_NOPROBE);
+	}
+
+	return 0;
+}
+
+static struct platform_driver puv3_intc_driver = {
+	.driver		= {
+		.name	= "PUV3-INTC",
+	},
+	.probe		= puv3_intc_probe,
+};
+
+static int __init puv3_intc_init(void)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&puv3_intc_driver);
+	if (ret) {
+		pr_err("failed to register puv3_intc_driver\n");
+	}
+
+	return ret;
+}
+arch_initcall(puv3_intc_init);
-- 
1.7.9.5

