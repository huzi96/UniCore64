From 2860435194255d43d07c3eced5f18a1247e770e3 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Mon, 30 Jan 2012 16:20:43 +0800
Subject: [PATCH 285/641] UniCore64: introduce fault.c

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/kernel/entry.S |   17 ++-------
 arch/unicore64/mm/Makefile    |    3 +-
 arch/unicore64/mm/fault.c     |   76 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 80 insertions(+), 16 deletions(-)
 create mode 100644 arch/unicore64/mm/fault.c

diff --git a/arch/unicore64/kernel/entry.S b/arch/unicore64/kernel/entry.S
index c61193d..0fd8241 100644
--- a/arch/unicore64/kernel/entry.S
+++ b/arch/unicore64/kernel/entry.S
@@ -49,13 +49,7 @@ ENDPROC(__vec_invalid)
 ENTRY(__vec_itrap)
 	__priv_context_save
 
-	dmovl		r0,  0xdeaddeaddead000c
-	__putdata	r0, r14, r15
-
-	__itrap_status	r0
-	__putdata	r0, r14, r15
-
-	__putdata	lr, r14, r15
+	call	__do_itrap
 
 	__priv_context_restore
 	eret
@@ -64,14 +58,7 @@ ENDPROC(__vec_itrap)
 ENTRY(__vec_dtrap)
 	__priv_context_save
 
-	dmovl		r0,  0xdeaddeaddead0010
-	__putdata	r0, r14, r15
-
-	__dtrap_status	r0
-	__putdata	r0, r14, r15
-
-	__dtrap_addr	r0
-	__putdata	r0, r14, r15
+	call	__do_dtrap
 
 	__priv_context_restore
 	eret
diff --git a/arch/unicore64/mm/Makefile b/arch/unicore64/mm/Makefile
index 3158b6a..02e5c12 100644
--- a/arch/unicore64/mm/Makefile
+++ b/arch/unicore64/mm/Makefile
@@ -1,2 +1,3 @@
-obj-y				:= mmu.o pgtable.o ioremap.o init.o tlb.o
+obj-y				:= fault.o ioremap.o init.o
+obj-y				+= mmu.o pgtable.o tlb.o
 obj-$(CONFIG_SWIOTLB)		+= dma-swiotlb.o
diff --git a/arch/unicore64/mm/fault.c b/arch/unicore64/mm/fault.c
new file mode 100644
index 0000000..01384e0
--- /dev/null
+++ b/arch/unicore64/mm/fault.c
@@ -0,0 +1,76 @@
+#include <linux/kernel.h>
+#include <arch/hwdef-cp0-sysctrl.h>
+
+#define __itrap_stat()	__read_cp_op(CP0_TRAP_STAT, 0)
+#define __dtrap_stat()	__read_cp_op(CP0_TRAP_STAT, 1)
+
+struct __trap_info {
+	int (*fn) (unsigned long addr);
+	const char *name;
+};
+
+static struct __trap_info __itrap_info[] = {
+	{ NULL,	"0: no error"				},
+	{ NULL,	"1: access debug-specific area"		},
+	{ NULL,	"2: 2nd level pagetable non-exist"	},
+	{ NULL,	"3: 3rd level pagetable non-exist"	},
+	{ NULL,	"4: page non-exist"			},
+	{ NULL,	"5: superpage non-exist"		},
+	{ NULL,	"6: non-executable instruction"		},
+	{ NULL,	"7: access US=0 page in user mode"	},
+	{ NULL,	"8: memory access error"		},
+	{ NULL,	"9: icache parity error"		},
+	{ NULL,	"a: icache access error"		},
+	{ NULL,	"b: illegal instruction"		},
+	{ NULL,	"c: previlege instruction"		},
+	{ NULL,	"d: eret instruction exception"		},
+	{ NULL,	"e: unknown itrap fault"		},
+	{ NULL,	"f: unknown itrap fault"		},
+};
+
+static struct __trap_info __dtrap_info[] = {
+	{ NULL,	"0: no error"				},
+	{ NULL,	"1: access debug-specific area"		},
+	{ NULL,	"2: 2nd level pagetable non-exist"	},
+	{ NULL,	"3: 3rd level pagetable non-exist"	},
+	{ NULL,	"4: page non-exist"			},
+	{ NULL,	"5: superpage non-exist"		},
+	{ NULL,	"6: read unreadable address"		},
+	{ NULL,	"7: write unwritable address"		},
+	{ NULL,	"8: access US=0 page in user mode"	},
+	{ NULL,	"9: unalignment access"			},
+	{ NULL,	"a: memory access error"		},
+	{ NULL,	"b: dcache parity error"		},
+	{ NULL,	"c: dcache access error"		},
+	{ NULL,	"d: divide zero"			},
+	{ NULL,	"e: access cacheable area in atomic op"	},
+	{ NULL,	"f: unknown dtrap fault"		},
+};
+
+void __do_itrap(unsigned long addr)
+{
+	struct __trap_info *info = __itrap_info + __itrap_stat();
+
+	if (info->fn) {
+		info->fn(addr);
+		return;
+	}
+
+	pr_emerg("Unhandled ITRAP: %s at 0x%16lx\n",
+	       info->name, addr);
+	BUG();
+}
+
+void __do_dtrap(unsigned long addr)
+{
+	struct __trap_info *info = __dtrap_info + __dtrap_stat();
+
+	if (info->fn) {
+		info->fn(addr);
+		return;
+	}
+
+	pr_emerg("Unhandled DTRAP: %s at 0x%16lx\n",
+	       info->name, addr);
+	BUG();
+}
-- 
1.7.9.5

