From 0de670b473f00300d00b80950bdd45be5c166979 Mon Sep 17 00:00:00 2001
From: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
Date: Tue, 22 May 2012 21:36:52 +0800
Subject: [PATCH 351/641] UniCore64: add comments for itimer

Signed-off-by: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
---
 Documentation/DocBook/unicore64-kernel.tmpl |   10 ++++---
 arch/unicore64/kernel/time.c                |   39 ++++++++++++++++++++++++++-
 2 files changed, 44 insertions(+), 5 deletions(-)

diff --git a/Documentation/DocBook/unicore64-kernel.tmpl b/Documentation/DocBook/unicore64-kernel.tmpl
index 9104b34..3787d6d 100644
--- a/Documentation/DocBook/unicore64-kernel.tmpl
+++ b/Documentation/DocBook/unicore64-kernel.tmpl
@@ -156,10 +156,12 @@
 </chapter>
 
 <chapter id="chapter7">
-	<title>Time</title>
-	<para>
-		Time.
-	</para>
+	<title>Timer</title>
+	<screen>
+		See file: arch/unicore64/kernel/time.c
+	</screen>
+!Parch/unicore64/kernel/time.c TIME_C
+!Earch/unicore64/kernel/time.c
 </chapter>
 
 </book>
diff --git a/arch/unicore64/kernel/time.c b/arch/unicore64/kernel/time.c
index 6cd6ac8..5eb1207 100644
--- a/arch/unicore64/kernel/time.c
+++ b/arch/unicore64/kernel/time.c
@@ -1,3 +1,8 @@
+/**
+ * DOC: TIME_C
+ *
+ * This file defines structures and functions that support itimer.
+ */
 #include <linux/kernel.h>
 #include <linux/init.h>
 #include <linux/errno.h>
@@ -20,11 +25,29 @@
 #define MIN_COUNTER_DELTA		(USEC_PER_SEC / CONFIG_HZ)
 #define MAX_COUNTER_DELTA		(NSEC_PER_SEC / CONFIG_HZ)
 
+/**
+ * __itimer_read() - read itimer counter register
+ * @cs:		pointer to clocksource __timer_cs
+ *
+ * Return code:
+ * Return itimer counter
+ */
 static cycle_t __itimer_read(struct clocksource *cs)
 {
 	return	__itimer_read_counter();
 }
 
+/**
+ * __itimer_set_next_event() - set itimer match register
+ * @delta:	specify how many itimer cycles till next itimer irq
+ * @c:		pointer to clock_event_device __itimer_ce
+ *
+ * Return code:
+ * Return 0 on success, -ETIME when the event is in the past.
+ *
+ * This function sets itimer match register. When itimer counter equals
+ * the value we set, we have next itimer irq.
+ */
 static int __itimer_set_next_event(unsigned long delta,
 		struct clock_event_device *c)
 {
@@ -37,6 +60,11 @@ static int __itimer_set_next_event(unsigned long delta,
 	return (signed)(next - count) <= MIN_COUNTER_DELTA ? -ETIME : 0;
 }
 
+/**
+ * __itimer_set_mode() - set the operating mode of itimer
+ * @mode:	new mode
+ * @c:		pointer to clock_event_device __itimer_ce
+ */
 static void __itimer_set_mode(enum clock_event_mode mode,
 		struct clock_event_device *c)
 {
@@ -69,6 +97,12 @@ static struct clocksource __itimer_cs = {
 	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
 };
 
+/**
+ * __itimer_irqhandler() - handler for itimer irq
+ *
+ * Clear corresponding bit of itimer irq in asr and call
+ * architecture-independent handler.
+ */
 void __itimer_irqhandler(void)
 {
 	/* Disarm the compare/match, signal the event. */
@@ -79,7 +113,10 @@ void __itimer_irqhandler(void)
 }
 
 /**
- * time_init() -
+ * time_init() - initialize itimer
+ *
+ * Register clocksource and clock_event_device for itimer and configure
+ * some parameters.
  */
 void __init time_init(void)
 {
-- 
1.7.9.5

