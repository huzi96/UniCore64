From 5938fddcef9df5c202ef2c643425d885d966460d Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 7 Jun 2012 11:01:42 +0800
Subject: [PATCH 367/641] UniCore64: redzone hypothesis

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/Kconfig.debug               |   11 +++++++++++
 arch/unicore64/configs/unicore64_defconfig |    3 +++
 arch/unicore64/kernel/entry.S              |    7 +++++++
 3 files changed, 21 insertions(+)

diff --git a/arch/unicore64/Kconfig.debug b/arch/unicore64/Kconfig.debug
index f4ea63c..e98629b 100644
--- a/arch/unicore64/Kconfig.debug
+++ b/arch/unicore64/Kconfig.debug
@@ -25,4 +25,15 @@ config OCD_CONSOLE
 	depends on VGA_CONSOLE!=y && FRAMEBUFFER_CONSOLE!=y && DEBUG_OCD
 	default y
 
+config DEBUG_REDZONE
+	bool "Protect stack when red zone enabled"
+	default n
+	help
+	  In common sense, compiler and os should guarantee stack discipline.
+
+	  However, we need to consider an optimization method named red zone,
+	  which will use unallocated stack space as temperary storage area.
+	  Since interrupts could take place in priviledge mode, we need to
+	  reserve additional stack space for correctness.
+
 endmenu
diff --git a/arch/unicore64/configs/unicore64_defconfig b/arch/unicore64/configs/unicore64_defconfig
index e4049cf..d58dba4 100644
--- a/arch/unicore64/configs/unicore64_defconfig
+++ b/arch/unicore64/configs/unicore64_defconfig
@@ -16,3 +16,6 @@ CONFIG_DEBUG_OCD=y
 
 ### Boot options
 CONFIG_CMDLINE="earlyprintk=ocd ignore_loglevel root=/dev/ram0 rw"
+
+### Kernel hacking
+CONFIG_DEBUG_REDZONE=y
diff --git a/arch/unicore64/kernel/entry.S b/arch/unicore64/kernel/entry.S
index 508beb6..69b601e 100644
--- a/arch/unicore64/kernel/entry.S
+++ b/arch/unicore64/kernel/entry.S
@@ -12,10 +12,17 @@
 	dlsl		&rd, sp, #13
 	.endm
 
+	.macro		__redzone
+#ifdef	CONFIG_DEBUG_REDZONE
+	dsub		sp, sp, #128			@ only a guess
+#endif
+	.endm
+
 	.macro		__priv_entry
 	@ step 1: save r0 and sp to keep their original values
 	movc		CP0_SWR, r0, #4
 	movc		CP0_SWR, sp, #5
+	__redzone
 
 	@ step 2: push special registers into stack, see struct pt_regs
 	dmov		r0, #-1
-- 
1.7.9.5

