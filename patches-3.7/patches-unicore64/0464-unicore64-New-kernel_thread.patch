From 23184c2280ead4ee2ceacc785721114b8f247bb6 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Fri, 2 Nov 2012 17:18:57 +0800
Subject: [PATCH 464/641] unicore64: New kernel_thread

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 arch/unicore64/Kconfig                 |    2 +
 arch/unicore64/include/asm/processor.h |    3 --
 arch/unicore64/kernel/entry.S          |    7 +++
 arch/unicore64/kernel/process.c        |   76 +++++++-------------------------
 4 files changed, 26 insertions(+), 62 deletions(-)

diff --git a/arch/unicore64/Kconfig b/arch/unicore64/Kconfig
index 2145edf..daa66f0 100644
--- a/arch/unicore64/Kconfig
+++ b/arch/unicore64/Kconfig
@@ -8,6 +8,8 @@ config UNICORE64
 	select HAVE_MEMBLOCK
 	select ARCH_WANT_FRAME_POINTERS
 	select GENERIC_IRQ_SHOW
+	select GENERIC_KERNEL_THREAD
+	select GENERIC_KERNEL_EXECVE
 	select OF
 	select OF_EARLY_FLATTREE
 	select NO_BOOTMEM
diff --git a/arch/unicore64/include/asm/processor.h b/arch/unicore64/include/asm/processor.h
index 61de863..93d8c7a 100644
--- a/arch/unicore64/include/asm/processor.h
+++ b/arch/unicore64/include/asm/processor.h
@@ -44,9 +44,6 @@ struct thread_struct {
 
 #define cpu_relax()		barrier()
 
-/* Create a new kernel thread */
-extern int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
-
 extern unsigned long get_wchan(struct task_struct *p);
 
 /* Return some info about the user process TASK. */
diff --git a/arch/unicore64/kernel/entry.S b/arch/unicore64/kernel/entry.S
index d5c0394..9f73a28 100644
--- a/arch/unicore64/kernel/entry.S
+++ b/arch/unicore64/kernel/entry.S
@@ -87,6 +87,13 @@ ENTRY(ret_from_fork)
 	eret
 ENDPROC(ret_from_fork)
 
+ENTRY(ret_from_kthread)
+	call		schedule_tail
+	dmov		r0, r17
+	adr		lr, 1001b
+	jump		r18
+ENDPROC(ret_from_kthread)
+
 ENTRY(__vec_invalid)
 	dmovl		r0, 0xdeaddeaddeaddead
 	__putdata	r0
diff --git a/arch/unicore64/kernel/process.c b/arch/unicore64/kernel/process.c
index d6b0903..b85ad2f 100644
--- a/arch/unicore64/kernel/process.c
+++ b/arch/unicore64/kernel/process.c
@@ -3,57 +3,8 @@
 
 #include <arch/asm-common.h>
 
-/**
- * kernel_execve() -
- * @filename:
- * @argv:
- * @envp:
- */
-int kernel_execve(const char *filename, const char *const argv[],
-		const char *const envp[])
-{
-	struct pt_regs *regs = task_pt_regs(current);
-	int ret = do_execve(filename, argv, envp, regs);
-
-	if (ret < 0)
-		return ret;
-
-	/* FIXME */
-	BUG();
-	return 0;
-}
-
-static void __noreturn kernel_thread_helper(void *unused,
-		int (*fn)(void *), void *arg)
-{
-	fn(arg);
-	do_exit(-1); /* Should never be called. */
-}
-
-/**
- * kernel_thread() - Create a kernel thread
- * @fn:
- * @arg:
- * @flags:
- */
-int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags)
-{
-	struct pt_regs regs;
-
-	memset(&regs, 0, sizeof(regs));
-
-	/* Don't use r0 since that is set to 0 in copy_thread. */
-	regs.UC64_R01 = (unsigned long)fn;
-	regs.UC64_R02 = (unsigned long)arg;
-	regs.UC64_R31 = (unsigned long)kernel_thread_helper;
-	regs.UC64_ASR = ASR_MODE_PRIV;
-
-	/* Create the new process. */
-	return do_fork(flags | CLONE_VM | CLONE_UNTRACED,
-			0, &regs, 0, NULL, NULL);
-}
-
 asmlinkage void ret_from_fork(void) __asm__("ret_from_fork");
+asmlinkage void ret_from_kthread(void) __asm__("ret_from_kthread");
 
 /**
  * copy_thread() - Copy a thread
@@ -68,17 +19,24 @@ int copy_thread(unsigned long clone_flags, unsigned long stack_start,
 {
 	struct pt_regs *childregs = task_pt_regs(p);
 
-	*childregs = *regs;
-	childregs->UC64_R00 = 0;
-	if (stack_start) {
-		BUG();
-	} else { /* For kernel_thread, useless pt_regs will be kept in stack */
-		childregs->UC64_R29 = (unsigned long)childregs;
-	}
-
 	/* cpu_context is used for __switch_to */
+	memset(&p->thread.cpu_context, 0, sizeof(struct cpu_context_save));
 	p->thread.cpu_context.r29 = (unsigned long)childregs;
-	p->thread.cpu_context.r30 = (unsigned long)ret_from_fork;
+
+	if (unlikely(!regs)) {
+		p->thread.cpu_context.r30 = (unsigned long)ret_from_kthread;
+		p->thread.cpu_context.r17 = stack_start; /* arg for fn(arg) */
+		p->thread.cpu_context.r18 = stk_sz; /* fn for fn(arg) */
+		memset(childregs, 0, sizeof(struct pt_regs));
+		/* For kernel_thread, useless pt_regs will be kept in stack */
+		childregs->UC64_R29 = (unsigned long)childregs;
+	} else {
+		p->thread.cpu_context.r30 = (unsigned long)ret_from_fork;
+
+		*childregs = *regs;
+		childregs->UC64_R00 = 0;
+		childregs->UC64_R29 = stack_start;
+	}
 
 	return 0;
 }
-- 
1.7.9.5

