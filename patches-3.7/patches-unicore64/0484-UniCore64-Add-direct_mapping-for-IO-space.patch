From 32b16ee3dadd970e2d2e6663b5aa7247fab100ab Mon Sep 17 00:00:00 2001
From: Liang Rongrong <liangrongrong@mprc.pku.edu.cn>
Date: Mon, 12 Nov 2012 19:31:34 +0800
Subject: [PATCH 484/641] UniCore64: Add direct_mapping for IO space

Signed-off-by: Liang Rongrong <liangrongrong@mprc.pku.edu.cn>
---
 arch/unicore64/mm/init.c |    2 +-
 arch/unicore64/mm/mmu.c  |   29 +++++++++++++++++++++++++++++
 2 files changed, 30 insertions(+), 1 deletion(-)

diff --git a/arch/unicore64/mm/init.c b/arch/unicore64/mm/init.c
index b96243f..b63eafc 100644
--- a/arch/unicore64/mm/init.c
+++ b/arch/unicore64/mm/init.c
@@ -73,7 +73,7 @@ static void __init memblock_init(void)
 	memblock_reserve(__pa(_text), _end - _text);
 
 	/* Reserve the page tables. */
-	memblock_reserve(__pa(swapper_pg_dir), 2 * PAGE_SIZE);
+	memblock_reserve(__pa(swapper_pg_dir), 4 * PAGE_SIZE);
 
 #ifdef CONFIG_BLK_DEV_INITRD
 	if (UC64_PM_INITRD_SIZE) {
diff --git a/arch/unicore64/mm/mmu.c b/arch/unicore64/mm/mmu.c
index c661bc0..209990f 100644
--- a/arch/unicore64/mm/mmu.c
+++ b/arch/unicore64/mm/mmu.c
@@ -33,6 +33,33 @@ static void __init uc64_create_direct_mapping(phys_addr_t start,
 	}
 }
 
+static void __init create_io_direct_mapping(phys_addr_t start,
+		unsigned long length)
+{
+	phys_addr_t phys;
+	phys_addr_t phys_pgd = UC64_PM_PGTABLE_PGD;
+	phys_addr_t phys_pud00 = UC64_PM_PGTABLE_PUD_IO00;
+	phys_addr_t phys_pud01 = UC64_PM_PGTABLE_PUD_IO01;
+	pgprot_t prot_pud;
+	pgprot_t prot_pmd;
+	pud_t *pud;
+	pmd_t *pmd;
+
+	prot_pud = __pgprot(UC64_PGD_EXIST);
+	pud = (pud_t *)__va(phys_pgd) + pgd_index((unsigned long)__va(start));
+	set_pud(pud, __pud(phys_pud00 | pgprot_val(prot_pud)));
+	pud++;
+	set_pud(pud, __pud(phys_pud01 | pgprot_val(prot_pud)));
+
+	prot_pmd = __pgprot(UC64_PMD_TYPE_IO | UC64_PMD_EXIST
+			| UC64_PMD_RWX | UC64_PMD_SPAGE);
+	pmd = (pmd_t *)__va(phys_pud00) + pmd_index((unsigned long)__va(start));
+	for (phys = start; phys < (start + length); phys += UC64_PMD_SIZE) {
+		set_pmd(pmd, __pmd(phys | pgprot_val(prot_pmd)));
+		pmd++;
+	}
+}
+
 /*
  * paging_init() sets up the page tables, initialises the zone memory
  * maps, and sets up the zero page, bad page and bad page tables.
@@ -49,6 +76,8 @@ void __init paging_init(void)
 		uc64_create_direct_mapping(reg->base, reg->size);
 	}
 
+	create_io_direct_mapping(__pa(UC64_VM_IO_START), 0x80000000);
+
 	/* Initialize the zero page. */
 	memset((void *)UC64_VM_ZEROPAGE, 0, PAGE_SIZE);
 	empty_zero_page = virt_to_page(UC64_VM_ZEROPAGE);
-- 
1.7.9.5

