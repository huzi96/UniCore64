From e811fe3806ff9049f559fd55182a5f5a17c66267 Mon Sep 17 00:00:00 2001
From: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
Date: Sat, 15 Dec 2012 16:33:40 +0800
Subject: [PATCH 497/641] unicore64: Add cmpxchg

Signed-off-by: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
---
 arch/unicore64/include/asm/cmpxchg.h |   71 +++++++++++++++++++++++++++++++---
 1 file changed, 66 insertions(+), 5 deletions(-)

diff --git a/arch/unicore64/include/asm/cmpxchg.h b/arch/unicore64/include/asm/cmpxchg.h
index 1396643..e6a4e4a 100644
--- a/arch/unicore64/include/asm/cmpxchg.h
+++ b/arch/unicore64/include/asm/cmpxchg.h
@@ -4,13 +4,74 @@
 #ifndef CONFIG_SMP
 #include <asm-generic/cmpxchg.h>
 #else
+#include <asm/barrier.h>
+
 #include <arch/asm-debug.h>
 
-#define cmpxchg(ptr, o, n)			\
-	({					\
-		uc64_debug_putx(0xdead0021);	\
-		(*ptr);				\
-	})
+/* This function doesn't exist, so you'll get a linker error
+   if something tries to do an invalid cmpxchg().  */
+extern void __cmpxchg_called_with_bad_pointer(void);
+
+static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,
+				unsigned long new, int size)
+{
+	unsigned long res = 0;
+
+	switch (size) {
+	case 4:
+		__asm__ __volatile__(
+			"1:	llw		%0, [%1+], #0\n"
+			"	cmpsub.a	%0, %2\n"
+			"	bne		2f\n"
+			"	mov		%0, %3\n"
+			"	scw		%0, [%1+], #0\n"
+			"	cmpsub.a	%0, #0\n"
+			"	beq		1b\n"
+			"	mov		%0, %2\n"
+			"2:"
+			: "=&r" (res)
+			: "r" (ptr), "r" (old), "r" (new)
+			: "cc", "memory");
+		break;
+	case 8:
+		__asm__ __volatile__(
+			"1:	lld		%0, [%1+], #0\n"
+			"	dcmpsub.a	%0, %2\n"
+			"	bne		2f\n"
+			"	dmov		%0, %3\n"
+			"	scd		%0, [%1+], #0\n"
+			"	dcmpsub.a	%0, #0\n"
+			"	beq		1b\n"
+			"	dmov		%0, %2\n"
+			"2:"
+			: "=&r" (res)
+			: "r" (ptr), "r" (old), "r" (new)
+			: "cc", "memory");
+		break;
+	default:
+		__cmpxchg_called_with_bad_pointer();
+	}
+
+	return res;
+}
+
+static inline unsigned long __cmpxchg_mb(volatile void *ptr, unsigned long old,
+					unsigned long new, int size)
+{
+	unsigned long ret;
+
+	smp_mb();
+	ret = __cmpxchg(ptr, old, new, size);
+	smp_mb();
+
+	return ret;
+}
+
+#define cmpxchg(ptr, o, n)						\
+	((__typeof__(*(ptr)))__cmpxchg_mb((ptr),			\
+					  (unsigned long)(o),		\
+					  (unsigned long)(n),		\
+					  sizeof(*(ptr))))
 
 #define xchg(ptr, x)				\
 	({					\
-- 
1.7.9.5

