From 8292a6b56999fdf4676b9671727b73c797d04dc8 Mon Sep 17 00:00:00 2001
From: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
Date: Fri, 12 Apr 2013 14:52:04 +0800
Subject: [PATCH 543/641] unicore64: SMP boot mainframe

Signed-off-by: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
---
 arch/unicore64/kernel/Makefile  |    2 +-
 arch/unicore64/kernel/headsmp.S |   37 ++++++++++++++++++++++++++++++++++
 arch/unicore64/kernel/smp.c     |   42 +++++++++++++++++++++++++++++++++++++--
 3 files changed, 78 insertions(+), 3 deletions(-)
 create mode 100644 arch/unicore64/kernel/headsmp.S

diff --git a/arch/unicore64/kernel/Makefile b/arch/unicore64/kernel/Makefile
index caf9cc8..78979d7 100644
--- a/arch/unicore64/kernel/Makefile
+++ b/arch/unicore64/kernel/Makefile
@@ -19,6 +19,6 @@ obj-$(CONFIG_UNICORE64)		+= cpu-uc64.o
 obj-$(CONFIG_OF_EARLY_FLATTREE)	+= devtree.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
 obj-$(CONFIG_ARCH_PUV4)		+= puv4-core.o puv4-intc.o
-obj-$(CONFIG_SMP)			+= smp.o
+obj-$(CONFIG_SMP)			+= smp.o headsmp.o
 
 extra-y				:= vmlinux.lds
diff --git a/arch/unicore64/kernel/headsmp.S b/arch/unicore64/kernel/headsmp.S
new file mode 100644
index 0000000..efd59ae
--- /dev/null
+++ b/arch/unicore64/kernel/headsmp.S
@@ -0,0 +1,37 @@
+#include <linux/linkage.h>
+#include <linux/init.h>
+
+#include <arch/hwdef-memory.h>
+#include <arch/asm-mmuops.h>
+#include <arch/head-macros.S>
+
+	__HEAD
+ENTRY(secondary_stext)
+	__head_init
+	__cache_init
+
+	dmovl		r0, #UC64_PM_PGTABLE_PGD
+	__set_pgd	r0
+
+	dmovl		r1, #UC64_PM_PGTABLE_PGD
+	dmovl		r0, #UC64_PM_PGTABLE_PUD_DM00
+	dor		r0, r0, #UC64_PGD_EXIST
+	std		r0, [r1]
+
+	__invalid_tlb
+
+	__enable_mmu
+
+	/* Use our vector table*/
+	ldd		r0, =__vectors_table
+	movc		CP0_VECBASE, r0, #0
+
+	movc		r0, CP0_INTR, #0
+	dandn		r0, r0, #CP0_INTR_IK2
+	movc		CP0_INTR, r0, #0
+
+	ldd		r0, =secondary_stack_start
+	ldd		sp, [r0]
+	ldd		r0, =secondary_start_kernel
+	jump		r0
+ENDPROC(secondary_stext)
diff --git a/arch/unicore64/kernel/smp.c b/arch/unicore64/kernel/smp.c
index 685fdec..f3e2bf4 100644
--- a/arch/unicore64/kernel/smp.c
+++ b/arch/unicore64/kernel/smp.c
@@ -1,5 +1,6 @@
 #include <linux/init.h>
 #include <linux/smp.h>
+#include <linux/sched.h>
 
 unsigned int num_processors = 2;
 
@@ -57,11 +58,48 @@ void __init smp_cpus_done(unsigned int max_cpus)
 	BUG();
 }
 
-int __cpuinit __cpu_up(unsigned int cpu, struct task_struct *tidle)
+unsigned long secondary_stack_start;
+
+static int __init smp_boot_one_cpu(unsigned int cpu, struct task_struct *idle)
+{
+	/*
+	 * CSU is not quite ready. Use a temporary reg 0xff6100000.
+	 */
+	__asm__ __volatile__(
+		"dmovl	r0, #0xfffffffff6100000\n"
+		"ldd	r1, =secondary_stext\n"
+		"stw	r1, [r0]\n"
+		"movc	p0.c10, r0, #4");
+
+	return 0;
+}
+
+/*
+ * Bring one cpu online.
+ */
+int __cpuinit __cpu_up(unsigned int cpu, struct task_struct *idle)
+{
+	/*
+	 * We need to tell the secondary core where to find its stack.
+	 */
+	secondary_stack_start = (unsigned long) task_stack_page(idle)
+			+ THREAD_SIZE - KSTK_PTREGS_GAP;
+
+	/*
+	 * Now bring the CPU into our world.
+	 */
+	smp_boot_one_cpu(cpu, idle);
+
+	return cpu_online(cpu) ? 0 : -1;
+}
+
+/*
+ * Where secondaries begin a life of C.
+ */
+void __init secondary_start_kernel(void)
 {
 	/* FIXME */
 	BUG();
-	return 0;
 }
 
 void smp_send_stop(void)
-- 
1.7.9.5

