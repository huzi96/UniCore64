From d429786a4135f3daef1e465ab1a10af10cd25d3a Mon Sep 17 00:00:00 2001
From: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
Date: Wed, 3 Apr 2013 09:46:47 +0800
Subject: [PATCH 549/641] unicore64: Use clocksource puv4_oscr_cs

Signed-off-by: Chang Huaixin <changhuaixin@mprc.pku.edu.cn>
---
 arch/unicore64/kernel/time.c |   33 ++++++++++++++++++---------------
 1 file changed, 18 insertions(+), 15 deletions(-)

diff --git a/arch/unicore64/kernel/time.c b/arch/unicore64/kernel/time.c
index 3173441..2093792 100644
--- a/arch/unicore64/kernel/time.c
+++ b/arch/unicore64/kernel/time.c
@@ -1,7 +1,7 @@
 /**
  * DOC: TIME_C
  *
- * This file defines structures and functions that support itimer.
+ * This file defines structures and functions that support itimer and ost.
  */
 #include <linux/kernel.h>
 #include <linux/init.h>
@@ -11,6 +11,9 @@
 #include <linux/clockchips.h>
 
 #include <arch/hwdef-cp0-sysctrl.h>
+#include <arch/puv4-regs-ost.h>
+
+#define __puv4_read_oscr()		readl(OST_OSCR)
 
 #define __itimer_read_counter()		__read_cp_op(CP0_INTR, 9)
 #define __itimer_write_match(cnt)	__write_cp_op(cnt, CP0_INTR, 10)
@@ -26,17 +29,25 @@
 #define MAX_COUNTER_DELTA		(NSEC_PER_SEC / CONFIG_HZ)
 
 /**
- * __itimer_read() - read itimer counter register
- * @cs:		pointer to clocksource __timer_cs
+ * puv4_read_oscr() - read ost counter register
+ * @cs:		pointer to clocksource puv4_oscr_cs
  *
  * Return code:
- * Return itimer counter
+ * Return ost counter
  */
-static cycle_t __itimer_read(struct clocksource *cs)
+static cycle_t puv4_read_oscr(struct clocksource *cs)
 {
-	return	__itimer_read_counter();
+	return __puv4_read_oscr();
 }
 
+static struct clocksource puv4_oscr_cs = {
+	.name		= "uc64-ost-oscr-clocksource",
+	.rating		= 200,
+	.read		= puv4_read_oscr,
+	.mask		= CLOCKSOURCE_MASK(32),
+	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+};
+
 /**
  * __itimer_set_next_event() - set itimer match register
  * @delta:	specify how many itimer cycles till next itimer irq
@@ -89,14 +100,6 @@ static struct clock_event_device __itimer_ce = {
 	.set_mode	= __itimer_set_mode,
 };
 
-static struct clocksource __itimer_cs = {
-	.name		= "uc64-inner-timer-clocksource",
-	.rating		= 200,
-	.read		= __itimer_read,
-	.mask		= CLOCKSOURCE_MASK(64),
-	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
-};
-
 /**
  * __itimer_irqhandler() - handler for itimer irq
  *
@@ -139,6 +142,6 @@ void __init time_init(void)
 
 	__itimer_ce.cpumask = cpumask_of(smp_processor_id());
 
-	clocksource_register_hz(&__itimer_cs, CLOCK_TICK_RATE);
+	clocksource_register_hz(&puv4_oscr_cs, CLOCK_TICK_RATE);
 	clockevents_register_device(&__itimer_ce);
 }
-- 
1.7.9.5

