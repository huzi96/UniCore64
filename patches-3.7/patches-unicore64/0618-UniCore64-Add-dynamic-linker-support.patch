From 0a735dd69401ffd64e3c11ab6de4a86f3681c9a4 Mon Sep 17 00:00:00 2001
From: Qin Rui <qinrui12@mprc.pku.edu.cn>
Date: Mon, 28 Apr 2014 23:00:23 +0800
Subject: [PATCH 618/641] UniCore64: Add dynamic linker support

Signed-off-by: Qin Rui <qinrui12@mprc.pku.edu.cn>
---
 arch/unicore64/include/asm/pgtable-swap.h |   15 +++++++++++----
 arch/unicore64/include/asm/pgtable.h      |    3 ++-
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/arch/unicore64/include/asm/pgtable-swap.h b/arch/unicore64/include/asm/pgtable-swap.h
index 16b35b2..c2969f8 100644
--- a/arch/unicore64/include/asm/pgtable-swap.h
+++ b/arch/unicore64/include/asm/pgtable-swap.h
@@ -3,11 +3,18 @@
 #endif
 
 #define UC64_PTE_FILE			UC64_PTE_YOUNG /* only when !PRESENT */
-#define PTE_FILE_MAX_BITS		36 /* FIXME */
+#define PTE_FILE_MAX_BITS		61 /* FIXME */
 
-#define __swp_type(x)			({BUG(); 0; })
-#define __swp_offset(x)			({BUG(); 0; })
-#define __swp_entry(type, offset)	((swp_entry_t){0}) /* FIXME */
+#define __SWP_TYPE_SHIFT		5
+#define __SWP_TYPE_BITS			7
+#define __SWP_OFFSET_SHIFT	(__SWP_TYPE_BITS + __SWP_TYPE_SHIFT)
+#define __SWP_TYPE_MASK		((1 << __SWP_TYPE_BITS) - 1)
+#define __swp_type(x)		(((x).val >> __SWP_TYPE_SHIFT)	\
+				& __SWP_TYPE_MASK)
+#define __swp_offset(x)		((x).val >> __SWP_OFFSET_SHIFT)
+#define __swp_entry(type, offset)   ((swp_entry_t) {  \
+				    ((type) << __SWP_TYPE_SHIFT) | \
+				    ((offset) << __SWP_OFFSET_SHIFT) })
 #define __pte_to_swp_entry(pte)		((swp_entry_t) { pte_val(pte) })
 #define __swp_entry_to_pte(swp)		((pte_t) { (swp).val })
 
diff --git a/arch/unicore64/include/asm/pgtable.h b/arch/unicore64/include/asm/pgtable.h
index 972afba..214fb46 100644
--- a/arch/unicore64/include/asm/pgtable.h
+++ b/arch/unicore64/include/asm/pgtable.h
@@ -43,7 +43,8 @@ extern pgd_t swapper_pg_dir[PTRS_PER_PGD];
 
 #define pte_offset_map(dir, addr)	pte_offset_kernel((dir), (addr))
 #define pte_unmap(pte)			do { } while (0)
-#define pte_modify(pte, newprot)	__pte({BUG(); 0; })
+#define pte_modify(pte, newprot)	__pte((pte_val(pte) & ~UC64_PTE_RWX) \
+					| (pgprot_val(newprot) & UC64_PTE_RWX))
 
 /* ZERO_PAGE is a global shared page that is always zero,
  * used for zero-mapped memory areas etc..  */
-- 
1.7.9.5

