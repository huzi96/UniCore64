From bface625ba796b81866954de636b95f17b7df535 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 24 Apr 2014 01:49:30 +0800
Subject: [PATCH 602/641] UniCore64: Rename unifb2 to fb-puv4

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 drivers/video/Makefile  |    2 +-
 drivers/video/fb-puv4.c |  505 +++++++++++++++++++++++++++++++++++++++++++++++
 drivers/video/unifb2.c  |  505 -----------------------------------------------
 3 files changed, 506 insertions(+), 506 deletions(-)
 create mode 100644 drivers/video/fb-puv4.c
 delete mode 100644 drivers/video/unifb2.c


diff --git a/drivers/video/fb-puv4.c b/drivers/video/fb-puv4.c
new file mode 100644
index 0000000..f612a99
--- /dev/null
+++ b/drivers/video/fb-puv4.c
@@ -0,0 +1,505 @@
+#include <linux/fb.h>
+#include <mach/hardware.h>
+#include <asm/io.h>
+
+static unsigned long unifb_regs[30];
+/* create fb0 framebuffer by default */
+static int unifb_enable __initdata = 1;
+
+struct pkunity_de2 {
+	struct fb_info *info;
+	struct fb_var_screeninfo old_var[2];
+	int id;
+};
+
+static const struct fb_videomode unifb_modes[] = {
+	/* 640x480-60 VESA */
+	{ "640x480@60",    60,  640,  480,  39721,  48,  16,  33, 10,  96, \
+	2, 0, FB_VMODE_NONINTERLACED, FB_MODE_IS_VESA },
+};
+
+#define VIDEOMEMSIZE	(2*1024*1024)
+/* 2 MB for each channel of unifb*/
+static void *videomemory;
+static u_long videomemorysize = VIDEOMEMSIZE;
+
+static struct fb_var_screeninfo unifb_default = {
+	.xres =		640,
+	.yres =		480,
+	.xres_virtual =	640,
+	.yres_virtual =	480,
+	.bits_per_pixel = 32,
+	.red =		{ 16, 8, 0 },
+	.green =	{ 8,  8, 0 },
+	.blue =		{ 0,  8, 0 },
+	.activate =	FB_ACTIVATE_NOW,
+	.height =	-1,
+	.width =	-1,
+	.pixclock =	39721,
+	.left_margin =	48,
+	.right_margin =	16,
+	.upper_margin =	33,
+	.lower_margin =	10,
+	.hsync_len =	96,
+	.vsync_len =	2,
+	.vmode =	FB_VMODE_NONINTERLACED,
+};
+
+static struct fb_fix_screeninfo unifb_fix = {
+	.id =		"DE2 FB",
+	.type =		FB_TYPE_PACKED_PIXELS,
+	.visual =	FB_VISUAL_TRUECOLOR,
+	.xpanstep =	1,
+	.ypanstep =	1,
+	.ywrapstep =	1,
+	.accel =	FB_ACCEL_NONE,
+};
+
+static u_long get_line_length(int xres_virtual, int bpp)
+{
+	u_long length;
+	length = xres_virtual * bpp;
+	length = (length + 31) & ~31;
+	length >>= 3;
+	return length;
+}
+
+static int unifb_check_var(struct fb_var_screeninfo *var,
+			 struct fb_info *info)
+{
+	u_long line_length;
+	if (var->vmode & FB_VMODE_CONUPDATE) {
+		var->vmode |= FB_VMODE_YWRAP;
+		var->xoffset = info->var.xoffset;
+		var->yoffset = info->var.yoffset;
+	}
+
+	/*
+	 *  Some very basic checks
+	 */
+	if (!var->xres)
+		var->xres = 1;
+	if (!var->yres)
+		var->yres = 1;
+	if (var->xres > var->xres_virtual)
+		var->xres_virtual = var->xres;
+	if (var->yres > var->yres_virtual)
+		var->yres_virtual = var->yres;
+	if (var->bits_per_pixel <= 1)
+		var->bits_per_pixel = 1;
+	else if (var->bits_per_pixel <= 8)
+		var->bits_per_pixel = 8;
+	else if (var->bits_per_pixel <= 16)
+		var->bits_per_pixel = 16;
+	else if (var->bits_per_pixel <= 24)
+		var->bits_per_pixel = 24;
+	else if (var->bits_per_pixel <= 32)
+		var->bits_per_pixel = 32;
+	else {
+		pr_err("397_check_var is failed return, -EINVAL = 0x%x\n",
+				-EINVAL);
+		return -EINVAL;
+	}
+	if (var->xres_virtual < var->xoffset + var->xres)
+		var->xres_virtual = var->xoffset + var->xres;
+	if (var->yres_virtual < var->yoffset + var->yres)
+		var->yres_virtual = var->yoffset + var->yres;
+
+	/*
+	 *  Memory limit
+	 */
+	line_length = get_line_length(var->xres_virtual, var->bits_per_pixel);
+	if (line_length * var->yres_virtual > videomemorysize) {
+		pr_err("431_check_var is failed return, -ENOMEM = 0x%x\n",
+				-ENOMEM);
+		return -ENOMEM;
+	}
+
+	switch (var->bits_per_pixel) {
+	case 1:
+	case 8:
+		var->red.offset = 0;
+		var->red.length = 8;
+		var->green.offset = 0;
+		var->green.length = 8;
+		var->blue.offset = 0;
+		var->blue.length = 8;
+		var->transp.offset = 0;
+		var->transp.length = 0;
+		break;
+	case 16:		/* ARGB 1555 */
+		if (var->transp.length) {
+			var->red.offset = 10;
+			var->red.length = 5;
+			var->green.offset = 5;
+			var->green.length = 5;
+			var->blue.offset = 0;
+			var->blue.length = 5;
+			var->transp.offset = 15;
+			var->transp.length = 1;
+		} else {	/* RGB 565 */
+			var->red.offset = 11;
+			var->red.length = 5;
+			var->green.offset = 5;
+			var->green.length = 6;
+			var->blue.offset = 0;
+			var->blue.length = 5;
+			var->transp.offset = 0;
+			var->transp.length = 0;
+		}
+		break;
+	case 24:		/* RGB 888 */
+		var->red.offset = 16;
+		var->red.length = 8;
+		var->green.offset = 8;
+		var->green.length = 8;
+		var->blue.offset = 0;
+		var->blue.length = 8;
+		var->transp.offset = 0;
+		var->transp.length = 0;
+		break;
+	case 32:		/* ARGB 8888 */
+		var->red.offset = 16;
+		var->red.length = 8;
+		var->green.offset = 8;
+		var->green.length = 8;
+		var->blue.offset = 0;
+		var->blue.length = 8;
+		var->transp.offset = 24;
+		var->transp.length = 8;
+		break;
+	}
+	var->red.msb_right = 0;
+	var->green.msb_right = 0;
+	var->blue.msb_right = 0;
+	var->transp.msb_right = 0;
+	return 0;
+}
+
+static int unifb_set_par(struct fb_info *info)
+{
+	int hTotal, vTotal, hSyncStart, hSyncEnd, vSyncStart, vSyncEnd;
+	int format;
+	struct pkunity_de2 *de2_channel = dev_get_drvdata(info->device);
+	struct fb_var_screeninfo orig_var = \
+	de2_channel->old_var[de2_channel->id-1];
+	if (info->var.xres == orig_var.xres
+		&& info->var.yres == orig_var.yres
+		&& info->var.upper_margin == orig_var.upper_margin
+		&& info->var.lower_margin == orig_var.lower_margin
+		&& info->var.left_margin  == orig_var.left_margin
+		&& info->var.right_margin == orig_var.right_margin
+		&& info->var.hsync_len == orig_var.hsync_len
+		&& info->var.vsync_len == orig_var.vsync_len
+		&& info->var.pixclock == orig_var.pixclock) {
+		/* Same as the old one, do nothing */
+		return 0;
+	}
+
+	switch (info->var.bits_per_pixel) {
+	case 8:
+		format = UDE_CFG_DST8;
+		break;
+	case 16:
+		format = UDE_CFG_DST16;
+		break;
+	case 24:
+		format = UDE_CFG_DST24;
+		break;
+	case 32:
+		format = UDE_CFG_DST32;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	/* config DE */
+
+	info->fix.line_length = get_line_length(info->var.xres_virtual,
+						info->var.bits_per_pixel);
+
+	hSyncStart = info->var.xres + info->var.right_margin;
+	hSyncEnd = hSyncStart + info->var.hsync_len;
+	hTotal = hSyncEnd + info->var.left_margin;
+
+	vSyncStart = info->var.yres + info->var.lower_margin;
+	vSyncEnd = vSyncStart + info->var.vsync_len;
+	vTotal = vSyncEnd + info->var.upper_margin;
+
+	/* Configure Graphic */
+	unifb_regs[0] = 0x1 << 1 | format | 0x1 << 10;
+	writel(unifb_regs[0], DE2_GFX1_CFG_REG);
+	unifb_regs[0] = 0x0;
+	writel(unifb_regs[0], DE2_GFX1_XY_REG);
+	unifb_regs[1] = info->var.yres << 16 | info->var.xres;
+	writel(unifb_regs[1], DE2_GFX1_SIZE_REG);
+	unifb_regs[2] = info->fix.smem_start;
+	writel(unifb_regs[2], DE2_GFX1_ADDR_REG);
+	unifb_regs[3] = get_line_length(info->var.xres,
+			info->var.bits_per_pixel);
+	writel(unifb_regs[3], DE2_GFX1_STRIDE_REG);
+
+	/* Configure Timing */
+	unifb_regs[4] = 0x1 << 1;
+	writel(unifb_regs[4], DE2_SCG1_CFG_REG);
+	unifb_regs[5] = (hTotal << 16) | (info->var.xres);
+	writel(unifb_regs[5], DE2_SCG1_H_BLANK_REG);
+	unifb_regs[6] = ((hSyncEnd) << 16) | (hSyncStart);
+	writel(unifb_regs[6], DE2_SCG1_H_SYNC_REG);
+	unifb_regs[7] = (vTotal << 16) | (info->var.yres);
+	writel(unifb_regs[7], DE2_SCG1_V_BLANK_REG);
+	unifb_regs[8] = ((vSyncEnd-1) << 16) | (vSyncStart);
+	writel(unifb_regs[8], DE2_SCG1_V_SYNC_REG);
+
+	/* Configure Output */
+	unifb_regs[9] = 0x1 << 2;
+	writel(unifb_regs[9], DE2_SQC1_CFG_REG);
+	unifb_regs[10] = 0x3f0000;
+	writel(unifb_regs[10], DE2_SQC1_EN_CTL_REG);
+	unifb_regs[11] = 0x64;
+	writel(unifb_regs[11], DE2_SQC2_CFG_REG);
+
+	/* update */
+	unifb_regs[11] = 0x1 | 0x1 << 4 | 0x1 << 5;
+	writel(unifb_regs[11], DE2_UPDATE_STATE_REG);
+	static int tmp = 1;
+	while (tmp)
+		tmp = readl(DE2_UPDATE_STATE_REG);
+	/* change old var to current one */
+	de2_channel->old_var[de2_channel->id-1] = info->var;
+	return 0;
+}
+
+#ifndef MODULE
+static int __init unifb_setup(char *options)
+{
+	char *this_opt;
+	unifb_enable = 0;
+	if (!options)
+		return 1;
+	unifb_enable = 1;
+	if (!*options)
+		return 1;
+	while ((this_opt = strsep(&options, ",")) != NULL) {
+		if (!*this_opt)
+			continue;
+		/* Test disable for backwards compatibility */
+		if (!strcmp(this_opt, "disable"))
+			unifb_enable = 0;
+	}
+	return 1;
+}
+#endif  /*  MODULE  */
+
+/*
+ *  Set a single color register. The values supplied are already
+ *  rounded down to the hardware's capabilities (according to the
+ *  entries in the var structure). Return != 0 for invalid regno.
+ */
+static int unifb_setcolreg(u_int regno, u_int red, u_int green, u_int blue,
+			 u_int transp, struct fb_info *info)
+{
+	if (regno >= 256)	/* no. of hw registers */
+		return 1;
+
+	/* grayscale works only partially under directcolor */
+	if (info->var.grayscale) {
+		/* grayscale = 0.30*R + 0.59*G + 0.11*B */
+		red = green = blue =
+		    (red * 77 + green * 151 + blue * 28) >> 8;
+	}
+
+#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
+	switch (info->fix.visual) {
+	case FB_VISUAL_TRUECOLOR:
+	case FB_VISUAL_PSEUDOCOLOR:
+		red = CNVT_TOHW(red, info->var.red.length);
+		green = CNVT_TOHW(green, info->var.green.length);
+		blue = CNVT_TOHW(blue, info->var.blue.length);
+		transp = CNVT_TOHW(transp, info->var.transp.length);
+		break;
+	case FB_VISUAL_DIRECTCOLOR:
+		red = CNVT_TOHW(red, 8);	/* expect 8 bit DAC */
+		green = CNVT_TOHW(green, 8);
+		blue = CNVT_TOHW(blue, 8);
+		/* hey, there is bug in transp handling... */
+		transp = CNVT_TOHW(transp, 8);
+		break;
+	}
+#undef CNVT_TOHW
+	/* Truecolor has hardware independent palette */
+	if (info->fix.visual == FB_VISUAL_TRUECOLOR) {
+		u32 v;
+
+		if (regno >= 16)
+			return 1;
+
+		v = (red << info->var.red.offset) |
+		    (green << info->var.green.offset) |
+		    (blue << info->var.blue.offset) |
+		    (transp << info->var.transp.offset);
+		switch (info->var.bits_per_pixel) {
+		case 8:
+			break;
+		case 16:
+		case 24:
+		case 32:
+			((u32 *) (info->pseudo_palette))[regno] = v;
+			break;
+		default:
+			return 1;
+		}
+		return 0;
+	}
+	return 0;
+}
+
+static int unimpl_pan_display(struct fb_var_screeninfo *var,
+			   struct fb_info *info)
+{
+	pr_err("unimpl_pan_display\n");
+	return -EINVAL;
+}
+
+static int unimpl_mmap(struct fb_info *info,
+		    struct vm_area_struct *vma)
+{
+	pr_err("unimpl_mmap\n");
+	return -EINVAL;
+}
+
+static struct fb_ops unifb_ops = {
+	.fb_read        = fb_sys_read,
+	.fb_write       = fb_sys_write,
+	.fb_check_var	= unifb_check_var,
+	.fb_set_par	= unifb_set_par,
+	.fb_setcolreg	= unifb_setcolreg,
+	.fb_fillrect	= sys_fillrect,
+	.fb_copyarea	= sys_copyarea,
+	.fb_imageblit	= sys_imageblit,
+	.fb_pan_display	= unimpl_pan_display,
+	.fb_mmap	= unimpl_mmap,
+};
+
+/*
+ *  Initialisation
+ */
+static int __init unifb_probe(struct platform_device *dev)
+{
+	struct fb_info *info;
+	struct pkunity_de2 *de2_channel;
+	int retval = -ENOMEM;
+	static char *unifb_option;
+	static int dbsize;
+
+	de2_channel =  kzalloc(sizeof(struct pkunity_de2), GFP_KERNEL);
+	if (NULL == de2_channel)
+		goto err;
+	/*
+	 * For real video cards we use ioremap.
+	 */
+	videomemory = (void *)__get_free_pages(GFP_KERNEL | __GFP_COMP,
+				get_order(videomemorysize));
+
+	if (!videomemory)
+		goto err;
+
+	memset(videomemory, 0x0, videomemorysize);
+
+	/*
+	 * VFB could clear memory to prevent kernel info
+	 * leakage into userspace and set black screen
+	 * VGA-based drivers MUST NOT clear memory if
+	 * they want to be able to take over vgacon
+	 */
+	info = framebuffer_alloc(sizeof(u32) * 256, &dev->dev);
+	if (!info)
+		goto err;
+
+	de2_channel->info = info;
+	de2_channel->id = 1;
+	info->screen_base = (char __iomem *)videomemory;
+	info->fbops = &unifb_ops;
+	dbsize = ARRAY_SIZE(unifb_modes);
+	/*FIXME use 32bpp */
+	retval = fb_find_mode(&info->var, info, \
+			unifb_option, unifb_modes, dbsize, \
+			&unifb_modes[0], 32);
+	if (!retval || (retval == 4))
+		info->var = unifb_default;
+	unifb_fix.smem_start = virt_to_phys(videomemory);
+	unifb_fix.smem_len = videomemorysize;
+	unifb_fix.mmio_start = PKUNITY_UNIGFX2_BASE;
+	info->fix = unifb_fix;
+	info->pseudo_palette = info->par;
+	info->par = NULL;
+	info->flags = FBINFO_FLAG_DEFAULT;
+	info->flags |= FBINFO_HWACCEL_DISABLED;
+
+	retval = fb_alloc_cmap(&info->cmap, 256, 0);
+	if (retval < 0)
+		goto err1;
+
+	platform_set_drvdata(dev, de2_channel);
+	retval = register_framebuffer(info);
+	if (retval < 0)
+		goto err2;
+
+	pr_info( \
+	"fb%d: Virtual frame buffer device, using %ldK of video memory\n", \
+	info->node, videomemorysize >> 10);
+
+	return 0;
+err2:
+	fb_dealloc_cmap(&info->cmap);
+err1:
+	framebuffer_release(info);
+err:
+	kfree(de2_channel);
+
+	return retval;
+}
+
+static struct platform_driver unifb_driver = {
+	.probe	 = unifb_probe,
+	.driver  = {
+		.name	= "unifb",
+	},
+};
+
+static struct platform_device *unifb_device;
+
+static int __init unifb_init(void)
+{
+	int ret = 0;
+
+	ret = platform_driver_register(&unifb_driver);
+	if (!ret) {
+		if (unifb_enable)
+			unifb_device  = platform_device_alloc("unifb", 0);
+
+		if (unifb_device)
+			ret = platform_device_add(unifb_device);
+		else
+			ret = -ENOMEM;
+
+		if (ret) {
+			platform_device_put(unifb_device);
+			platform_driver_unregister(&unifb_driver);
+			return ret;
+		}
+	}
+	return ret;
+}
+module_init(unifb_init);
+
+#ifdef MODULE
+static void __exit unifb_exit(void)
+{
+	platform_device_unregister(unifb_device);
+	platform_driver_unregister(&unifb_driver);
+}
+module_exit(unifb_exit);
+
+MODULE_LICENSE("GPL v2");
+#endif				/* MODULE */
diff --git a/drivers/video/unifb2.c b/drivers/video/unifb2.c
deleted file mode 100644
index f612a99..0000000
--- a/drivers/video/unifb2.c
+++ /dev/null
@@ -1,505 +0,0 @@
-#include <linux/fb.h>
-#include <mach/hardware.h>
-#include <asm/io.h>
-
-static unsigned long unifb_regs[30];
-/* create fb0 framebuffer by default */
-static int unifb_enable __initdata = 1;
-
-struct pkunity_de2 {
-	struct fb_info *info;
-	struct fb_var_screeninfo old_var[2];
-	int id;
-};
-
-static const struct fb_videomode unifb_modes[] = {
-	/* 640x480-60 VESA */
-	{ "640x480@60",    60,  640,  480,  39721,  48,  16,  33, 10,  96, \
-	2, 0, FB_VMODE_NONINTERLACED, FB_MODE_IS_VESA },
-};
-
-#define VIDEOMEMSIZE	(2*1024*1024)
-/* 2 MB for each channel of unifb*/
-static void *videomemory;
-static u_long videomemorysize = VIDEOMEMSIZE;
-
-static struct fb_var_screeninfo unifb_default = {
-	.xres =		640,
-	.yres =		480,
-	.xres_virtual =	640,
-	.yres_virtual =	480,
-	.bits_per_pixel = 32,
-	.red =		{ 16, 8, 0 },
-	.green =	{ 8,  8, 0 },
-	.blue =		{ 0,  8, 0 },
-	.activate =	FB_ACTIVATE_NOW,
-	.height =	-1,
-	.width =	-1,
-	.pixclock =	39721,
-	.left_margin =	48,
-	.right_margin =	16,
-	.upper_margin =	33,
-	.lower_margin =	10,
-	.hsync_len =	96,
-	.vsync_len =	2,
-	.vmode =	FB_VMODE_NONINTERLACED,
-};
-
-static struct fb_fix_screeninfo unifb_fix = {
-	.id =		"DE2 FB",
-	.type =		FB_TYPE_PACKED_PIXELS,
-	.visual =	FB_VISUAL_TRUECOLOR,
-	.xpanstep =	1,
-	.ypanstep =	1,
-	.ywrapstep =	1,
-	.accel =	FB_ACCEL_NONE,
-};
-
-static u_long get_line_length(int xres_virtual, int bpp)
-{
-	u_long length;
-	length = xres_virtual * bpp;
-	length = (length + 31) & ~31;
-	length >>= 3;
-	return length;
-}
-
-static int unifb_check_var(struct fb_var_screeninfo *var,
-			 struct fb_info *info)
-{
-	u_long line_length;
-	if (var->vmode & FB_VMODE_CONUPDATE) {
-		var->vmode |= FB_VMODE_YWRAP;
-		var->xoffset = info->var.xoffset;
-		var->yoffset = info->var.yoffset;
-	}
-
-	/*
-	 *  Some very basic checks
-	 */
-	if (!var->xres)
-		var->xres = 1;
-	if (!var->yres)
-		var->yres = 1;
-	if (var->xres > var->xres_virtual)
-		var->xres_virtual = var->xres;
-	if (var->yres > var->yres_virtual)
-		var->yres_virtual = var->yres;
-	if (var->bits_per_pixel <= 1)
-		var->bits_per_pixel = 1;
-	else if (var->bits_per_pixel <= 8)
-		var->bits_per_pixel = 8;
-	else if (var->bits_per_pixel <= 16)
-		var->bits_per_pixel = 16;
-	else if (var->bits_per_pixel <= 24)
-		var->bits_per_pixel = 24;
-	else if (var->bits_per_pixel <= 32)
-		var->bits_per_pixel = 32;
-	else {
-		pr_err("397_check_var is failed return, -EINVAL = 0x%x\n",
-				-EINVAL);
-		return -EINVAL;
-	}
-	if (var->xres_virtual < var->xoffset + var->xres)
-		var->xres_virtual = var->xoffset + var->xres;
-	if (var->yres_virtual < var->yoffset + var->yres)
-		var->yres_virtual = var->yoffset + var->yres;
-
-	/*
-	 *  Memory limit
-	 */
-	line_length = get_line_length(var->xres_virtual, var->bits_per_pixel);
-	if (line_length * var->yres_virtual > videomemorysize) {
-		pr_err("431_check_var is failed return, -ENOMEM = 0x%x\n",
-				-ENOMEM);
-		return -ENOMEM;
-	}
-
-	switch (var->bits_per_pixel) {
-	case 1:
-	case 8:
-		var->red.offset = 0;
-		var->red.length = 8;
-		var->green.offset = 0;
-		var->green.length = 8;
-		var->blue.offset = 0;
-		var->blue.length = 8;
-		var->transp.offset = 0;
-		var->transp.length = 0;
-		break;
-	case 16:		/* ARGB 1555 */
-		if (var->transp.length) {
-			var->red.offset = 10;
-			var->red.length = 5;
-			var->green.offset = 5;
-			var->green.length = 5;
-			var->blue.offset = 0;
-			var->blue.length = 5;
-			var->transp.offset = 15;
-			var->transp.length = 1;
-		} else {	/* RGB 565 */
-			var->red.offset = 11;
-			var->red.length = 5;
-			var->green.offset = 5;
-			var->green.length = 6;
-			var->blue.offset = 0;
-			var->blue.length = 5;
-			var->transp.offset = 0;
-			var->transp.length = 0;
-		}
-		break;
-	case 24:		/* RGB 888 */
-		var->red.offset = 16;
-		var->red.length = 8;
-		var->green.offset = 8;
-		var->green.length = 8;
-		var->blue.offset = 0;
-		var->blue.length = 8;
-		var->transp.offset = 0;
-		var->transp.length = 0;
-		break;
-	case 32:		/* ARGB 8888 */
-		var->red.offset = 16;
-		var->red.length = 8;
-		var->green.offset = 8;
-		var->green.length = 8;
-		var->blue.offset = 0;
-		var->blue.length = 8;
-		var->transp.offset = 24;
-		var->transp.length = 8;
-		break;
-	}
-	var->red.msb_right = 0;
-	var->green.msb_right = 0;
-	var->blue.msb_right = 0;
-	var->transp.msb_right = 0;
-	return 0;
-}
-
-static int unifb_set_par(struct fb_info *info)
-{
-	int hTotal, vTotal, hSyncStart, hSyncEnd, vSyncStart, vSyncEnd;
-	int format;
-	struct pkunity_de2 *de2_channel = dev_get_drvdata(info->device);
-	struct fb_var_screeninfo orig_var = \
-	de2_channel->old_var[de2_channel->id-1];
-	if (info->var.xres == orig_var.xres
-		&& info->var.yres == orig_var.yres
-		&& info->var.upper_margin == orig_var.upper_margin
-		&& info->var.lower_margin == orig_var.lower_margin
-		&& info->var.left_margin  == orig_var.left_margin
-		&& info->var.right_margin == orig_var.right_margin
-		&& info->var.hsync_len == orig_var.hsync_len
-		&& info->var.vsync_len == orig_var.vsync_len
-		&& info->var.pixclock == orig_var.pixclock) {
-		/* Same as the old one, do nothing */
-		return 0;
-	}
-
-	switch (info->var.bits_per_pixel) {
-	case 8:
-		format = UDE_CFG_DST8;
-		break;
-	case 16:
-		format = UDE_CFG_DST16;
-		break;
-	case 24:
-		format = UDE_CFG_DST24;
-		break;
-	case 32:
-		format = UDE_CFG_DST32;
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	/* config DE */
-
-	info->fix.line_length = get_line_length(info->var.xres_virtual,
-						info->var.bits_per_pixel);
-
-	hSyncStart = info->var.xres + info->var.right_margin;
-	hSyncEnd = hSyncStart + info->var.hsync_len;
-	hTotal = hSyncEnd + info->var.left_margin;
-
-	vSyncStart = info->var.yres + info->var.lower_margin;
-	vSyncEnd = vSyncStart + info->var.vsync_len;
-	vTotal = vSyncEnd + info->var.upper_margin;
-
-	/* Configure Graphic */
-	unifb_regs[0] = 0x1 << 1 | format | 0x1 << 10;
-	writel(unifb_regs[0], DE2_GFX1_CFG_REG);
-	unifb_regs[0] = 0x0;
-	writel(unifb_regs[0], DE2_GFX1_XY_REG);
-	unifb_regs[1] = info->var.yres << 16 | info->var.xres;
-	writel(unifb_regs[1], DE2_GFX1_SIZE_REG);
-	unifb_regs[2] = info->fix.smem_start;
-	writel(unifb_regs[2], DE2_GFX1_ADDR_REG);
-	unifb_regs[3] = get_line_length(info->var.xres,
-			info->var.bits_per_pixel);
-	writel(unifb_regs[3], DE2_GFX1_STRIDE_REG);
-
-	/* Configure Timing */
-	unifb_regs[4] = 0x1 << 1;
-	writel(unifb_regs[4], DE2_SCG1_CFG_REG);
-	unifb_regs[5] = (hTotal << 16) | (info->var.xres);
-	writel(unifb_regs[5], DE2_SCG1_H_BLANK_REG);
-	unifb_regs[6] = ((hSyncEnd) << 16) | (hSyncStart);
-	writel(unifb_regs[6], DE2_SCG1_H_SYNC_REG);
-	unifb_regs[7] = (vTotal << 16) | (info->var.yres);
-	writel(unifb_regs[7], DE2_SCG1_V_BLANK_REG);
-	unifb_regs[8] = ((vSyncEnd-1) << 16) | (vSyncStart);
-	writel(unifb_regs[8], DE2_SCG1_V_SYNC_REG);
-
-	/* Configure Output */
-	unifb_regs[9] = 0x1 << 2;
-	writel(unifb_regs[9], DE2_SQC1_CFG_REG);
-	unifb_regs[10] = 0x3f0000;
-	writel(unifb_regs[10], DE2_SQC1_EN_CTL_REG);
-	unifb_regs[11] = 0x64;
-	writel(unifb_regs[11], DE2_SQC2_CFG_REG);
-
-	/* update */
-	unifb_regs[11] = 0x1 | 0x1 << 4 | 0x1 << 5;
-	writel(unifb_regs[11], DE2_UPDATE_STATE_REG);
-	static int tmp = 1;
-	while (tmp)
-		tmp = readl(DE2_UPDATE_STATE_REG);
-	/* change old var to current one */
-	de2_channel->old_var[de2_channel->id-1] = info->var;
-	return 0;
-}
-
-#ifndef MODULE
-static int __init unifb_setup(char *options)
-{
-	char *this_opt;
-	unifb_enable = 0;
-	if (!options)
-		return 1;
-	unifb_enable = 1;
-	if (!*options)
-		return 1;
-	while ((this_opt = strsep(&options, ",")) != NULL) {
-		if (!*this_opt)
-			continue;
-		/* Test disable for backwards compatibility */
-		if (!strcmp(this_opt, "disable"))
-			unifb_enable = 0;
-	}
-	return 1;
-}
-#endif  /*  MODULE  */
-
-/*
- *  Set a single color register. The values supplied are already
- *  rounded down to the hardware's capabilities (according to the
- *  entries in the var structure). Return != 0 for invalid regno.
- */
-static int unifb_setcolreg(u_int regno, u_int red, u_int green, u_int blue,
-			 u_int transp, struct fb_info *info)
-{
-	if (regno >= 256)	/* no. of hw registers */
-		return 1;
-
-	/* grayscale works only partially under directcolor */
-	if (info->var.grayscale) {
-		/* grayscale = 0.30*R + 0.59*G + 0.11*B */
-		red = green = blue =
-		    (red * 77 + green * 151 + blue * 28) >> 8;
-	}
-
-#define CNVT_TOHW(val, width) ((((val)<<(width))+0x7FFF-(val))>>16)
-	switch (info->fix.visual) {
-	case FB_VISUAL_TRUECOLOR:
-	case FB_VISUAL_PSEUDOCOLOR:
-		red = CNVT_TOHW(red, info->var.red.length);
-		green = CNVT_TOHW(green, info->var.green.length);
-		blue = CNVT_TOHW(blue, info->var.blue.length);
-		transp = CNVT_TOHW(transp, info->var.transp.length);
-		break;
-	case FB_VISUAL_DIRECTCOLOR:
-		red = CNVT_TOHW(red, 8);	/* expect 8 bit DAC */
-		green = CNVT_TOHW(green, 8);
-		blue = CNVT_TOHW(blue, 8);
-		/* hey, there is bug in transp handling... */
-		transp = CNVT_TOHW(transp, 8);
-		break;
-	}
-#undef CNVT_TOHW
-	/* Truecolor has hardware independent palette */
-	if (info->fix.visual == FB_VISUAL_TRUECOLOR) {
-		u32 v;
-
-		if (regno >= 16)
-			return 1;
-
-		v = (red << info->var.red.offset) |
-		    (green << info->var.green.offset) |
-		    (blue << info->var.blue.offset) |
-		    (transp << info->var.transp.offset);
-		switch (info->var.bits_per_pixel) {
-		case 8:
-			break;
-		case 16:
-		case 24:
-		case 32:
-			((u32 *) (info->pseudo_palette))[regno] = v;
-			break;
-		default:
-			return 1;
-		}
-		return 0;
-	}
-	return 0;
-}
-
-static int unimpl_pan_display(struct fb_var_screeninfo *var,
-			   struct fb_info *info)
-{
-	pr_err("unimpl_pan_display\n");
-	return -EINVAL;
-}
-
-static int unimpl_mmap(struct fb_info *info,
-		    struct vm_area_struct *vma)
-{
-	pr_err("unimpl_mmap\n");
-	return -EINVAL;
-}
-
-static struct fb_ops unifb_ops = {
-	.fb_read        = fb_sys_read,
-	.fb_write       = fb_sys_write,
-	.fb_check_var	= unifb_check_var,
-	.fb_set_par	= unifb_set_par,
-	.fb_setcolreg	= unifb_setcolreg,
-	.fb_fillrect	= sys_fillrect,
-	.fb_copyarea	= sys_copyarea,
-	.fb_imageblit	= sys_imageblit,
-	.fb_pan_display	= unimpl_pan_display,
-	.fb_mmap	= unimpl_mmap,
-};
-
-/*
- *  Initialisation
- */
-static int __init unifb_probe(struct platform_device *dev)
-{
-	struct fb_info *info;
-	struct pkunity_de2 *de2_channel;
-	int retval = -ENOMEM;
-	static char *unifb_option;
-	static int dbsize;
-
-	de2_channel =  kzalloc(sizeof(struct pkunity_de2), GFP_KERNEL);
-	if (NULL == de2_channel)
-		goto err;
-	/*
-	 * For real video cards we use ioremap.
-	 */
-	videomemory = (void *)__get_free_pages(GFP_KERNEL | __GFP_COMP,
-				get_order(videomemorysize));
-
-	if (!videomemory)
-		goto err;
-
-	memset(videomemory, 0x0, videomemorysize);
-
-	/*
-	 * VFB could clear memory to prevent kernel info
-	 * leakage into userspace and set black screen
-	 * VGA-based drivers MUST NOT clear memory if
-	 * they want to be able to take over vgacon
-	 */
-	info = framebuffer_alloc(sizeof(u32) * 256, &dev->dev);
-	if (!info)
-		goto err;
-
-	de2_channel->info = info;
-	de2_channel->id = 1;
-	info->screen_base = (char __iomem *)videomemory;
-	info->fbops = &unifb_ops;
-	dbsize = ARRAY_SIZE(unifb_modes);
-	/*FIXME use 32bpp */
-	retval = fb_find_mode(&info->var, info, \
-			unifb_option, unifb_modes, dbsize, \
-			&unifb_modes[0], 32);
-	if (!retval || (retval == 4))
-		info->var = unifb_default;
-	unifb_fix.smem_start = virt_to_phys(videomemory);
-	unifb_fix.smem_len = videomemorysize;
-	unifb_fix.mmio_start = PKUNITY_UNIGFX2_BASE;
-	info->fix = unifb_fix;
-	info->pseudo_palette = info->par;
-	info->par = NULL;
-	info->flags = FBINFO_FLAG_DEFAULT;
-	info->flags |= FBINFO_HWACCEL_DISABLED;
-
-	retval = fb_alloc_cmap(&info->cmap, 256, 0);
-	if (retval < 0)
-		goto err1;
-
-	platform_set_drvdata(dev, de2_channel);
-	retval = register_framebuffer(info);
-	if (retval < 0)
-		goto err2;
-
-	pr_info( \
-	"fb%d: Virtual frame buffer device, using %ldK of video memory\n", \
-	info->node, videomemorysize >> 10);
-
-	return 0;
-err2:
-	fb_dealloc_cmap(&info->cmap);
-err1:
-	framebuffer_release(info);
-err:
-	kfree(de2_channel);
-
-	return retval;
-}
-
-static struct platform_driver unifb_driver = {
-	.probe	 = unifb_probe,
-	.driver  = {
-		.name	= "unifb",
-	},
-};
-
-static struct platform_device *unifb_device;
-
-static int __init unifb_init(void)
-{
-	int ret = 0;
-
-	ret = platform_driver_register(&unifb_driver);
-	if (!ret) {
-		if (unifb_enable)
-			unifb_device  = platform_device_alloc("unifb", 0);
-
-		if (unifb_device)
-			ret = platform_device_add(unifb_device);
-		else
-			ret = -ENOMEM;
-
-		if (ret) {
-			platform_device_put(unifb_device);
-			platform_driver_unregister(&unifb_driver);
-			return ret;
-		}
-	}
-	return ret;
-}
-module_init(unifb_init);
-
-#ifdef MODULE
-static void __exit unifb_exit(void)
-{
-	platform_device_unregister(unifb_device);
-	platform_driver_unregister(&unifb_driver);
-}
-module_exit(unifb_exit);
-
-MODULE_LICENSE("GPL v2");
-#endif				/* MODULE */
-- 
1.7.9.5

