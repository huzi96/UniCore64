From 36c0de18810c24d7f5e122e7f32620558b1a7ab6 Mon Sep 17 00:00:00 2001
From: Guan Xuetao <gxt@mprc.pku.edu.cn>
Date: Thu, 24 Apr 2014 06:00:07 +0800
Subject: [PATCH 605/641] UniCore64: Add PATA BK3710 driver

Signed-off-by: Guan Xuetao <gxt@mprc.pku.edu.cn>
---
 drivers/ata/Kconfig       |    7 ++
 drivers/ata/Makefile      |    1 +
 drivers/ata/pata_bk3710.c |  267 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 275 insertions(+)
 create mode 100644 drivers/ata/pata_bk3710.c

diff --git a/drivers/ata/Kconfig b/drivers/ata/Kconfig
index e08d322..857cfb0 100644
--- a/drivers/ata/Kconfig
+++ b/drivers/ata/Kconfig
@@ -835,6 +835,13 @@ config PATA_PLATFORM
 
 	  If unsure, say N.
 
+config PATA_BK3710
+	tristate "PATA support for BK3710"
+	help
+	  This option enables support for Mentor Graphics BK-3710 PATA Controller.
+
+	  If unsure, say N.
+
 config PATA_OF_PLATFORM
 	tristate "OpenFirmware platform device PATA support"
 	depends on PATA_PLATFORM && OF
diff --git a/drivers/ata/Makefile b/drivers/ata/Makefile
index 9329daf..d9a98b6 100644
--- a/drivers/ata/Makefile
+++ b/drivers/ata/Makefile
@@ -77,6 +77,7 @@ obj-$(CONFIG_PATA_TRIFLEX)	+= pata_triflex.o
 obj-$(CONFIG_PATA_VIA)		+= pata_via.o
 obj-$(CONFIG_PATA_WINBOND)	+= pata_sl82c105.o
 
+obj-$(CONFIG_PATA_BK3710)	+= pata_bk3710.o
 # SFF PIO only
 obj-$(CONFIG_PATA_AT32)		+= pata_at32.o
 obj-$(CONFIG_PATA_AT91)		+= pata_at91.o
diff --git a/drivers/ata/pata_bk3710.c b/drivers/ata/pata_bk3710.c
new file mode 100644
index 0000000..cd89343
--- /dev/null
+++ b/drivers/ata/pata_bk3710.c
@@ -0,0 +1,267 @@
+/*
+ * pata_bk3710.c 	- SIL680 PATA for new ATA layer
+ *			  (C) 2005 Red Hat Inc
+ *
+ * based upon
+ *
+ * linux/drivers/ide/pci/siimage.c		Version 1.07	Nov 30, 2003
+ *
+ * Copyright (C) 2001-2002	Andre Hedrick <andre@linux-ide.org>
+ * Copyright (C) 2003		Red Hat <alan@redhat.com>
+ *
+ *  May be copied or modified under the terms of the GNU General Public License
+ *
+ *  Documentation publically available.
+ *
+ *	If you have strange problems with nVidia chipset systems please
+ *	see the SI support documentation and update your system BIOS
+ *	if necessary
+ *
+ * TODO
+ *	If we know all our devices are LBA28 (or LBA28 sized)  we could use
+ *	the command fifo mode.
+ */
+
+#define BK3710_IDESTAT 0x47
+
+
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/pci.h>
+#include <linux/init.h>
+#include <linux/blkdev.h>
+#include <linux/delay.h>
+#include <scsi/scsi_host.h>
+#include <linux/libata.h>
+#include <linux/platform_device.h>
+#include <linux/ata_platform.h>
+#include <arch/puv4-iomem.h>
+
+#define DRV_NAME "pata_bk3710"
+#define DRV_VERSION "0.1"
+
+#define BK3710_BMICP		0x00
+#define BK3710_BMISP		0x02
+#define BK3710_BMIDTP		0x04
+#define BK3710_BMICS		0x08
+#define BK3710_BMISS		0x0A
+#define BK3710_BMIDTPS		0x0C
+#define BK3710_IDETIMP		0x40
+#define BK3710_IDETIMS		0x42
+#define BK3710_SIDETIM		0x44
+#define BK3710_SLEWCTL		0x45
+#define BK3710_IDESTATUS	0x47
+#define BK3710_UDMACTL		0x48
+#define BK3710_UDMATIM		0x4A
+#define BK3710_MISCCTL		0x50
+
+#define BK3710_IORDYTMP		0x78
+#define BK3710_IORDYTMS		0x7C
+#define BK3710_D1_SHIFT	4
+#define BK3710_D0_SHIFT	0
+
+void __iomem *base;
+
+
+
+
+/**
+ *	bk3710_cable_detect	-	cable detection
+ *	@ap: ATA port
+ *
+ *	Perform cable detection. The SIL680 stores this in PCI config
+ *	space for us.
+ */
+
+static int bk3710_cable_detect(struct ata_port *ap) {
+		return ATA_CBL_PATA80;
+}
+
+/**
+ *	bk3710_set_piomode	-	set initial PIO mode data
+ *	@ap: ATA interface
+ *	@adev: ATA device
+ *
+ *	Program the SIL680 registers for PIO mode. Note that the task speed
+ *	registers are shared between the devices so we must pick the lowest
+ *	mode for command work.
+ */
+
+static void bk3710_set_piomode(struct ata_port *ap, struct ata_device *adev)
+{
+	writel(0x00000000, base + BK3710_MISCCTL);
+	writew(0xb3ff, base + BK3710_IDETIMP);
+}
+
+/**
+ *	bk3710_set_dmamode	-	set initial DMA mode data
+ *	@ap: ATA interface
+ *	@adev: ATA device
+ *
+ *	Program the MWDMA/UDMA modes for the bk3710 k
+ *	chipset. The MWDMA mode values are pulled from a lookup table
+ *	while the chipset uses mode number for UDMA.
+ */
+static void bk3710_set_dmamode(struct ata_port *ap, struct ata_device *adev)
+{
+
+	u16	val16;
+
+	static const u8 udma_timings[7] = {
+		0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6,
+	};
+
+	int mode = adev->dma_mode;
+	int dshift = adev->devno ? BK3710_D1_SHIFT : BK3710_D0_SHIFT;
+	writel(0x00000000, base + BK3710_MISCCTL);
+
+	writew(0xb3ff, base + BK3710_IDETIMP);
+	writew(0x000f, base + BK3710_UDMACTL);
+	if (mode >= XFER_UDMA_0) {
+		val16 = readw( base + BK3710_UDMATIM);
+
+		val16 &= ~(0xf << dshift);
+		val16 |= udma_timings[mode - XFER_UDMA_0] << dshift;
+		writew(val16, base + BK3710_UDMATIM);
+
+	} else { /* MWDMA */
+//		cs5536_read(pdev, DTC, &dtc);
+//
+//		dtc &= ~(IDE_DRV_MASK << dshift);
+//		dtc |= mwdma_timings[mode - XFER_MW_DMA_0] << dshift;
+//
+//		cs5536_write(pdev, DTC, dtc);
+	}
+
+}
+
+static struct scsi_host_template bk3710_sht = {
+	ATA_BMDMA_SHT(DRV_NAME),
+};
+
+static struct ata_port_operations bk3710_port_ops = {
+	.inherits	= &ata_bmdma32_port_ops,
+	.cable_detect	= bk3710_cable_detect,
+	.set_piomode	= bk3710_set_piomode,
+	.set_dmamode	= bk3710_set_dmamode,
+};
+
+static int __devinit pata_bk3710_init_one(struct platform_device *pdev)
+{
+	static const struct ata_port_info info = {
+		.flags = ATA_FLAG_SLAVE_POSS,
+		.pio_mask = ATA_PIO4,
+		.mwdma_mask = ATA_MWDMA2,
+		.udma_mask = ATA_UDMA6,
+		.port_ops = &bk3710_port_ops
+	};
+
+	const struct ata_port_info *ppi[] = { &info, NULL };
+	static int printed_version;
+	struct ata_host *host;
+	void __iomem *mmio_base;
+	struct resource *res;
+	int irq;
+	if (!printed_version++)
+		dev_printk(KERN_DEBUG, &pdev->dev, "version " DRV_VERSION "\n");
+
+
+	/* Allocate host and set it up */
+	host = ata_host_alloc_pinfo(&pdev->dev, ppi, 2);
+	if (!host)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if (!res)
+		return -ENXIO;
+	irq = res->start;
+	/* Get MMIO base and initialize port addresses */
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -ENXIO;
+	mmio_base = (void __iomem *) res->start;
+	base = mmio_base;
+	host->ports[0]->ioaddr.bmdma_addr = mmio_base + 0x00;
+	host->ports[0]->ioaddr.cmd_addr = mmio_base + 0x1f0;
+	host->ports[0]->ioaddr.ctl_addr = mmio_base + 0x3f6;
+	host->ports[0]->ioaddr.altstatus_addr = mmio_base + 0x3f6;
+	ata_sff_std_ports(&host->ports[0]->ioaddr);
+	host->ports[1]->ioaddr.bmdma_addr = mmio_base + 0x08;
+	host->ports[1]->ioaddr.cmd_addr = mmio_base + 0x170;
+	host->ports[1]->ioaddr.ctl_addr = mmio_base + 0x376;
+	host->ports[1]->ioaddr.altstatus_addr = mmio_base + 0x376;
+	ata_sff_std_ports(&host->ports[1]->ioaddr);
+
+	/* Register & activate */
+	return ata_host_activate(host, irq, ata_sff_interrupt,
+				 IRQF_SHARED, &bk3710_sht);
+}
+
+#ifdef CONFIG_PM
+static int bk3710_reinit_one(struct pci_dev *pdev)
+{
+	return 0;
+}
+#endif
+
+static int __devexit pata_bk3710_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+static struct platform_driver pata_bk3710_driver = {
+	.probe		= pata_bk3710_init_one,
+	.remove		= __devexit_p(pata_bk3710_remove),
+	.driver 	= {
+		.name		= DRV_NAME,
+		.owner		= THIS_MODULE,
+	},
+#ifdef CONFIG_PM
+//	.suspend	= ata_pci_device_suspend,
+//	.resume		= bk3710_reinit_one,
+#endif
+};
+
+static struct resource pata_bk3710_resources[] = {
+	[0] = {
+		.start = PUV4_UNIPATAS_BASE,
+		.end = PUV4_UNIPATAE_BASE,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = 12,
+		.end   = 12,
+		.flags = IORESOURCE_IRQ,
+	}
+};
+
+static u64 puv3_pata_bk3710_dmamask = 0xffffffffUL;
+static struct platform_device puv3_device_pata_bk3710 = {
+	.name	= "pata_bk3710",
+	.id	= -1,
+	.dev = {
+		.dma_mask               = &puv3_pata_bk3710_dmamask,
+		.coherent_dma_mask      = 0xffffffff,
+	},
+	.num_resources	  = ARRAY_SIZE(pata_bk3710_resources),
+	.resource	  = pata_bk3710_resources,
+};
+static int __init bk3710_init(void)
+{	int ret;
+	ret = platform_device_register(&puv3_device_pata_bk3710);
+
+	return platform_driver_register(&pata_bk3710_driver);
+}
+
+static void __exit bk3710_exit(void)
+{
+	platform_driver_unregister(&pata_bk3710_driver);
+}
+
+MODULE_AUTHOR("LTC");
+MODULE_DESCRIPTION("low-level driver for BK-3710 PATA");
+MODULE_LICENSE("GPL");
+MODULE_VERSION(DRV_VERSION);
+
+module_init(bk3710_init);
+module_exit(bk3710_exit);
-- 
1.7.9.5

